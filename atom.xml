<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hxy(慌糖盐)</title>
  
  
  <link href="https://ethanh3514.github.io/atom.xml" rel="self"/>
  
  <link href="https://ethanh3514.github.io/"/>
  <updated>2024-04-07T07:44:09.167Z</updated>
  <id>https://ethanh3514.github.io/</id>
  
  <author>
    <name>EthanH3514</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring 分层解耦 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/04/06/Spring-%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/04/06/Spring-%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-04-06T13:50:29.000Z</published>
    <updated>2024-04-07T07:44:09.167Z</updated>
    
    <content type="html"><![CDATA[<p>qaq 面向注解编程真难学</p><span id="more"></span><h3 id="三层架构">三层架构</h3><ul><li><strong>Controller</strong>：控制层。接收请求，响应数据</li><li><strong>Service</strong>：业务逻辑层。处理具体的业务逻辑</li><li><strong>Dao</strong>：数据访问层（Data AccessObject)（持久层），负责数据访问操作</li></ul><h3 id="分层解耦">分层解耦</h3><ul><li>控制反转（IOC）（Inversion OfControl）：对象的创建控制权由程序自身转移到外部（容器）</li><li>依赖注入（DI）（DependencyInjection）：容器为应用程序提供运行时所依赖的资源</li><li>Bean对象：IOC容器中创建、管理的对象</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="at">@Component</span><span class="co">//将当前类交给IOC容器管理，成为IOC容器中的bean</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> EmpServiceA <span class="kw">implements</span> EmpService <span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">@Autowired</span><span class="co">//运行时，IOC容器会提供这个类型的bean对象，并赋值 - 依赖注入</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> EmpDao empDao<span class="op">;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">...</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h4 id="bean的声明">Bean的声明</h4><ul><li><code>@Component</code>：不属于下面三类的时候用</li><li><code>@Controller</code>：标注在控制器类上</li><li><code>@Service</code>：标在业务类上</li><li><code>@Repository</code>：标在数据访问类上</li></ul><p>注意：</p><ul><li>声明bean的时候，可以通过value属性指定bean的名字，没指定的话默认为<strong>类名首字母小写</strong></li><li>springboot集成web开发的时候，声明控制类bean只能用@Controller</li></ul><h4 id="组件扫描">组件扫描</h4><ul><li><p>声明的注解，需要被组件扫描注解@ComponentScan扫描才会生效</p></li><li><p><span class="citation" data-cites="ComponentScan注解没有显示配置">@ComponentScan注解没有显示配置</span>，实际上已经包含在启动类声明注解@SpringBootApplication，默认扫描范围是启动类所在包及其子包</p></li><li><p>可以自行声明注解@ComponentScan来管理扫描路径（不推荐）</p><ul><li>在启动类前加<code>@ComponentScan({"dao","com.hxy"})</code></li><li>因为会把默认的取代，所以需要加上原来的包</li></ul></li></ul><h3 id="bean注入">Bean注入</h3><ul><li><p><span class="citation" data-cites="Autowired默认按照类型注入">@Autowired默认按照类型注入</span>，若存在多个相同类型的bean，会报错</p></li><li><p>解决</p><ul><li><p><span class="citation" data-cites="Primary">@Primary</span>加在想要生效的类前</p><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="at">@Primary</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="at">@Service</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> EmpServiceA <span class="kw">implements</span> EmpService <span class="op">{</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//...</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li><li><p><span class="citation" data-cites="Qualifier">@Qualifier</span>加在@Autowired前，<strong>类名首字母小写</strong></p><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="at">@Autowired</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="at">@Qualifier</span><span class="op">(</span><span class="st">"empServiceA"</span><span class="op">)</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> EmpService empService<span class="op">;</span></span></code></pre></div></li><li><p><span class="citation" data-cites="Resource">@Resource</span>加载要注入的位置，替换@Autowired ，按照名称注入</p><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="at">@Resource</span><span class="op">(</span>name <span class="op">=</span> <span class="st">"empServiceB"</span><span class="op">)</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> EmpService empService<span class="op">;</span></span></code></pre></div></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq 面向注解编程真难学&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Spring" scheme="https://ethanh3514.github.io/tags/Spring/"/>
    
    <category term="分层解耦" scheme="https://ethanh3514.github.io/tags/%E5%88%86%E5%B1%82%E8%A7%A3%E8%80%A6/"/>
    
  </entry>
  
  <entry>
    <title>Spring 请求响应 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/04/06/Spring-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/04/06/Spring-%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-04-06T13:03:27.000Z</published>
    <updated>2024-04-06T13:27:16.823Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><p>极简地记一下</p><span id="more"></span><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">package</span><span class="im"> com</span><span class="op">.</span><span class="im">hxy</span><span class="op">.</span><span class="im">controller</span><span class="op">;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">com</span><span class="op">.</span><span class="im">hxy</span><span class="op">.</span><span class="im">pojo</span><span class="op">.</span><span class="im">User</span><span class="op">;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">org</span><span class="op">.</span><span class="im">springframework</span><span class="op">.</span><span class="im">format</span><span class="op">.</span><span class="im">annotation</span><span class="op">.</span><span class="im">DateTimeFormat</span><span class="op">;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">org</span><span class="op">.</span><span class="im">springframework</span><span class="op">.</span><span class="im">web</span><span class="op">.</span><span class="im">bind</span><span class="op">.</span><span class="im">annotation</span><span class="op">.*;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">javax</span><span class="op">.</span><span class="im">servlet</span><span class="op">.</span><span class="im">http</span><span class="op">.</span><span class="im">HttpServletRequest</span><span class="op">;</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">time</span><span class="op">.</span><span class="im">LocalDateTime</span><span class="op">;</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">Arrays</span><span class="op">;</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">List</span><span class="op">;</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="at">@RestController</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> RequestController <span class="op">{</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="co">//    @RequestMapping("/hello")</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="co">//    public String hello(HttpServletRequest request) {</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="co">//        String name = request.getParameter("name");</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="co">//        String ageStr = request.getParameter("age");</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="co">//</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="co">//        int age = Integer.parseInt(ageStr);</span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="co">//        System.out.println(name + ": " + age);</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="co">//</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="co">//        return "OK";</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a><span class="co">//    }</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="co">//required指明参数是否必须</span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    <span class="co">//RequestParam可以将名称手动映射</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    <span class="at">@RequestMapping</span><span class="op">(</span><span class="st">"/hello"</span><span class="op">)</span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="bu">String</span> <span class="fu">hello</span><span class="op">(</span><span class="at">@RequestParam</span><span class="op">(</span>name <span class="op">=</span> <span class="st">"name"</span><span class="op">,</span> required <span class="op">=</span> <span class="kw">false</span><span class="op">)</span> <span class="bu">String</span> username<span class="op">,</span> <span class="bu">Integer</span> age<span class="op">)</span> <span class="op">{</span></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>username <span class="op">+</span> <span class="st">": "</span> <span class="op">+</span> age<span class="op">);</span></span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">"OK"</span><span class="op">;</span></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    <span class="co">//需要和实体对象的属性名一致</span></span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>    <span class="at">@RequestMapping</span><span class="op">(</span><span class="st">"/simplePojo"</span><span class="op">)</span></span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="bu">String</span> <span class="fu">simplePojo</span><span class="op">(</span>User user<span class="op">)</span> <span class="op">{</span></span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>user<span class="op">);</span></span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">"OK"</span><span class="op">;</span></span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>    <span class="co">//数组参数：需要请求参数名和形参中数组变量名相同</span></span><span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>    <span class="at">@RequestMapping</span><span class="op">(</span><span class="st">"/arrayParam"</span><span class="op">)</span></span><span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="bu">String</span> <span class="fu">arrayParam</span><span class="op">(</span><span class="bu">String</span><span class="op">[]</span> hobby<span class="op">)</span> <span class="op">{</span></span><span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="bu">Arrays</span><span class="op">.</span><span class="fu">toString</span><span class="op">(</span>hobby<span class="op">));</span></span><span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">"OK"</span><span class="op">;</span></span><span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>    <span class="co">//集合参数：需要请求参数名与形参中集合变量名相同，并且通过@RequestParam绑定参数关系</span></span><span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>    <span class="at">@RequestMapping</span><span class="op">(</span><span class="st">"/listParam"</span><span class="op">)</span></span><span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="bu">String</span> <span class="fu">arrayParam</span><span class="op">(</span><span class="at">@RequestParam</span> <span class="bu">List</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> hobby<span class="op">)</span> <span class="op">{</span></span><span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>hobby<span class="op">);</span></span><span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">"OK"</span><span class="op">;</span></span><span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>    <span class="co">//日期参数</span></span><span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>    <span class="at">@RequestMapping</span><span class="op">(</span><span class="st">"/dateParam"</span><span class="op">)</span></span><span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="bu">String</span> <span class="fu">dateParam</span><span class="op">(</span><span class="at">@DateTimeFormat</span><span class="op">(</span>pattern <span class="op">=</span> <span class="st">"yyyy-MM-dd HH:mm:ss"</span><span class="op">)</span>LocalDateTime updateTime<span class="op">)</span> <span class="op">{</span></span><span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>updateTime<span class="op">);</span></span><span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">"OK"</span><span class="op">;</span></span><span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>    <span class="co">//键名需要和对象中属性值一致</span></span><span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>    <span class="at">@RequestMapping</span><span class="op">(</span><span class="st">"/jsonParam"</span><span class="op">)</span></span><span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="bu">String</span> <span class="fu">jsonParam</span><span class="op">(</span><span class="at">@RequestBody</span> User user<span class="op">)</span> <span class="op">{</span></span><span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>user<span class="op">);</span></span><span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">"OK"</span><span class="op">;</span></span><span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>    <span class="at">@RequestMapping</span><span class="op">(</span><span class="st">"/path/{id}"</span><span class="op">)</span></span><span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="bu">String</span> <span class="fu">pathParam</span><span class="op">(</span><span class="at">@PathVariable</span> <span class="bu">Integer</span> id<span class="op">)</span> <span class="op">{</span></span><span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>id<span class="op">);</span></span><span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">"OK"</span><span class="op">;</span></span><span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a>    <span class="at">@RequestMapping</span><span class="op">(</span><span class="st">"/path/{id}/{name}"</span><span class="op">)</span></span><span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="bu">String</span> <span class="fu">pathParam2</span><span class="op">(</span><span class="at">@PathVariable</span> <span class="bu">Integer</span> id<span class="op">,</span> <span class="at">@PathVariable</span> <span class="bu">String</span> name<span class="op">)</span> <span class="op">{</span></span><span id="cb1-80"><a href="#cb1-80" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>id <span class="op">+</span> <span class="st">": "</span> <span class="op">+</span> name<span class="op">);</span></span><span id="cb1-81"><a href="#cb1-81" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="st">"OK"</span><span class="op">;</span></span><span id="cb1-82"><a href="#cb1-82" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-83"><a href="#cb1-83" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h4 id="responsebody">ResponseBody</h4><ul><li>作用在方法上或类上</li><li>可以将方法返回值直接响应，如果返回值类型是<strong>实体对象/集合</strong>，将会转换为JSON格式响应</li><li><span class="citation" data-cites="RestController">@RestController</span> = <span class="citation" data-cites="Controller">@Controller</span> + <span class="citation" data-cites="ResponseBody">@ResponseBody</span></li></ul><h4 id="统一响应格式">统一响应格式</h4><ul><li><p>将各式各样的返回值统一</p><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> <span class="bu">Result</span> <span class="op">{</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">//响应码，1表示成功，0表示失败</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="bu">Integer</span> code<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//提示信息</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="bu">String</span> msg<span class="op">;</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">//返回的数据</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="bu">Object</span> data<span class="op">;</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">//...</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">//...</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="bu">Result</span> <span class="fu">success</span><span class="op">(</span><span class="bu">Object</span> data<span class="op">)</span> <span class="op">{</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="kw">new</span> <span class="bu">Result</span><span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="st">"success"</span><span class="op">,</span> data<span class="op">);</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="bu">Result</span> <span class="fu">success</span><span class="op">()</span> <span class="op">{</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="kw">new</span> <span class="bu">Result</span><span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="st">"success"</span><span class="op">,</span> <span class="kw">null</span><span class="op">);</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="bu">Result</span> <span class="fu">error</span><span class="op">(</span><span class="bu">String</span> msg<span class="op">)</span> <span class="op">{</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="kw">new</span> <span class="bu">Result</span><span class="op">(</span><span class="dv">0</span><span class="op">,</span> msg<span class="op">,</span> <span class="kw">null</span><span class="op">);</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;
&lt;p&gt;极简地记一下&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Web" scheme="https://ethanh3514.github.io/tags/Web/"/>
    
    <category term="Spring" scheme="https://ethanh3514.github.io/tags/Spring/"/>
    
    <category term="请求响应" scheme="https://ethanh3514.github.io/tags/%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/04/06/HTTP%E5%8D%8F%E8%AE%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/04/06/HTTP%E5%8D%8F%E8%AE%AE-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-04-06T09:56:36.000Z</published>
    <updated>2024-04-06T10:10:54.228Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><h3 id="http请求协议">http请求协议</h3><ul><li>请求行：<code>GET /path?key=value&amp;key=value HTTP/1.1</code>（请求方式、资源路径、协议）</li><li>请求头：第二行开始 <code>key=value</code></li><li>请求体：请求头空一行后接</li></ul><h4 id="get-和-post方法">GET 和 POST方法</h4><ul><li>GET方法的请求参数在请求行中，没有请求体。大小有限制<ul><li>以<code>?key=value&amp;key=value</code>的格式</li></ul></li><li>POST方法的请求参数在请求体中，POST请求大小无限制</li></ul><h3 id="http响应协议">http响应协议</h3><ul><li>响应行：<code>HTTP/1.1 200 OK</code>响应数据第一行（协议、状态码、描述）</li><li>响应头：第二行开始 <code>key=value</code></li><li>响应体：最后一部分，存放响应数据（json格式）</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HTTP" scheme="https://ethanh3514.github.io/tags/HTTP/"/>
    
    <category term="Web" scheme="https://ethanh3514.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>超星平台无法粘贴 解决方案</title>
    <link href="https://ethanh3514.github.io/2024/04/04/%E8%B6%85%E6%98%9F%E5%B9%B3%E5%8F%B0%E6%97%A0%E6%B3%95%E7%B2%98%E8%B4%B4-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://ethanh3514.github.io/2024/04/04/%E8%B6%85%E6%98%9F%E5%B9%B3%E5%8F%B0%E6%97%A0%E6%B3%95%E7%B2%98%E8%B4%B4-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2024-04-04T07:23:51.000Z</published>
    <updated>2024-04-04T07:27:22.645Z</updated>
    
    <content type="html"><![CDATA[<p>老师的要求是提交代码，但是不能用附件，又不能粘贴，总不能再敲一遍。</p><span id="more"></span><p>当粘贴的时候，会出现一个弹窗提示禁止粘贴，这个弹窗和相应的逻辑肯定是JS里面的，所以把JS禁用了就没事了。</p><p>F12 -&gt; F1 -&gt; Debugger -&gt; Disable JavaScript</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;老师的要求是提交代码，但是不能用附件，又不能粘贴，总不能再敲一遍。&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://ethanh3514.github.io/tags/JavaScript/"/>
    
    <category term="攻略" scheme="https://ethanh3514.github.io/tags/%E6%94%BB%E7%95%A5/"/>
    
  </entry>
  
  <entry>
    <title>杂记 - 数学是永远的温柔乡</title>
    <link href="https://ethanh3514.github.io/2024/04/04/%E6%9D%82%E8%AE%B0-%E6%95%B0%E5%AD%A6%E6%98%AF%E6%B0%B8%E8%BF%9C%E7%9A%84%E6%B8%A9%E6%9F%94%E4%B9%A1/"/>
    <id>https://ethanh3514.github.io/2024/04/04/%E6%9D%82%E8%AE%B0-%E6%95%B0%E5%AD%A6%E6%98%AF%E6%B0%B8%E8%BF%9C%E7%9A%84%E6%B8%A9%E6%9F%94%E4%B9%A1/</id>
    <published>2024-04-03T16:39:30.000Z</published>
    <updated>2024-04-03T17:06:06.508Z</updated>
    
    <content type="html"><![CDATA[<p>深夜朋友发来一道数学题，在做题的过程中找到了久违的感觉</p><span id="more"></span><p>或许是高中两年竞赛生涯的培养，无论我的状态多差，只要碰到数学题都可以立刻高度集中精神，马上回到最佳状态。一道好的题可以给我一场纯粹思维洗礼，这是在绝大部分娱乐活动中无法获得的。</p><p>也许这也是我大学前两年一直想去数学系的原因。</p><p>最终没去的理由也很简单，因为我看清了自己。而且为了断绝这份念想，之后也很少再碰数学。</p><p>也许可以算是遗憾</p><hr><p><strong>附题目</strong>：</p><p>设 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.299ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1900 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1511,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 在 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.811ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4778.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mo" transform="translate(389,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1167,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g><g data-mml-node="mo" transform="translate(2167,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(2611.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3389.7,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g><g data-mml-node="mo" transform="translate(4389.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></span> 上连续可导，且</p><p><span class="math display"><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.2ex;" xmlns="http://www.w3.org/2000/svg" width="21.477ex" height="4.468ex" role="img" focusable="false" viewBox="0 -1002.7 9493 1974.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(394,0)"></path><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(950,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(46.6,-844) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1239,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(1672.7,0)"><g data-mml-node="mo"><svg width="278" height="1505.4" y="-502.7" x="27.5" viewBox="0 -186.5 278 1505.4"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" transform="scale(1,2.26)"></path></svg></g><g data-mml-node="msup" transform="translate(333,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(778,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="msup" transform="translate(2145.3,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(636,413) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"></path></g></g><g data-mml-node="mo" transform="translate(3025.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3414.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(3986.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4375.7,0)"><svg width="278" height="1505.4" y="-502.7" x="27.5" viewBox="0 -186.5 278 1505.4"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" transform="scale(1,2.26)"></path></svg></g></g><g data-mml-node="mo" transform="translate(6659.2,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mo" transform="translate(7715,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8493,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container></span> ，</p><p>证明： <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.024ex;" xmlns="http://www.w3.org/2000/svg" width="25.408ex" height="3.18ex" role="img" focusable="false" viewBox="0 -952.7 11230.3 1405.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="75" d="M383 58Q327 -10 256 -10H249Q124 -10 105 89Q104 96 103 226Q102 335 102 348T96 369Q86 385 36 385H25V408Q25 431 27 431L38 432Q48 433 67 434T105 436Q122 437 142 438T172 441T184 442H187V261Q188 77 190 64Q193 49 204 40Q224 26 264 26Q290 26 311 35T343 58T363 90T375 120T379 144Q379 145 379 161T380 201T380 248V315Q380 361 370 372T320 385H302V431Q304 431 378 436T457 442H464V264Q464 84 465 81Q468 61 479 55T524 46H542V0Q540 0 467 -5T390 -11H383V58Z" transform="translate(394,0)"></path><path data-c="70" d="M36 -148H50Q89 -148 97 -134V-126Q97 -119 97 -107T97 -77T98 -38T98 6T98 55T98 106Q98 140 98 177T98 243T98 296T97 335T97 351Q94 370 83 376T38 385H20V408Q20 431 22 431L32 432Q42 433 61 434T98 436Q115 437 135 438T165 441T176 442H179V416L180 390L188 397Q247 441 326 441Q407 441 464 377T522 216Q522 115 457 52T310 -11Q242 -11 190 33L182 40V-45V-101Q182 -128 184 -134T195 -145Q216 -148 244 -148H260V-194H252L228 -193Q205 -192 178 -192T140 -191Q37 -191 28 -194H20V-148H36ZM424 218Q424 292 390 347T305 402Q234 402 182 337V98Q222 26 294 26Q345 26 384 80T424 218Z" transform="translate(950,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1539,-229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1239,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(3168.5,0)"><g data-mml-node="mo"><svg width="278" height="1405.4" y="-452.7" x="27.5" viewBox="0 -174.1 278 1405.4"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" transform="scale(1,2.11)"></path></svg></g><g data-mml-node="mi" transform="translate(333,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="msup" transform="translate(905,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="TeXAtom" transform="translate(499,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(778,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mi" transform="translate(2717.3,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(3267.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3656.3,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(4228.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4617.3,0)"><svg width="278" height="1405.4" y="-452.7" x="27.5" viewBox="0 -174.1 278 1405.4"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" transform="scale(1,2.11)"></path></svg></g></g><g data-mml-node="mo" transform="translate(8396.5,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mo" transform="translate(9452.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(10230.3,0)"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></mjx-container></span> .（北京大学）.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;深夜朋友发来一道数学题，在做题的过程中找到了久违的感觉&lt;/p&gt;</summary>
    
    
    
    
    <category term="数学" scheme="https://ethanh3514.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="杂记" scheme="https://ethanh3514.github.io/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS DOM对象 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/25/JS-DOM%E5%AF%B9%E8%B1%A1-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/25/JS-DOM%E5%AF%B9%E8%B1%A1-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-25T05:28:34.000Z</published>
    <updated>2024-03-25T05:31:54.653Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><ul><li>Document Object Model</li><li>文档对象模型</li><li>将标记语言的各个组成部分封装为对应的对象<ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul></li><li>JS通过操纵DOM，可以对HTML进行操作</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JavaScript" scheme="https://ethanh3514.github.io/tags/JavaScript/"/>
    
    <category term="DOM" scheme="https://ethanh3514.github.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>JS BOM对象 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/25/JS-BOM%E5%AF%B9%E8%B1%A1-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/25/JS-BOM%E5%AF%B9%E8%B1%A1-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-25T05:22:58.000Z</published>
    <updated>2024-03-25T05:27:59.694Z</updated>
    
    <content type="html"><![CDATA[<p>学就完了！</p><span id="more"></span><h3 id="window">Window</h3><ul><li>浏览器窗口对象</li><li>获取：直接使用window（可省略）<ul><li><code>window.alert("Hello window");</code></li><li><code>alert("Hello window");</code></li></ul></li><li>属性<ul><li><code>history</code>：对History对象的只读引用</li><li><code>location</code>：用于窗口或框架的Location对象</li><li><code>navigator</code>：对Navigator对象的只读引用</li></ul></li><li>方法<ul><li><code>alert()</code>：显示带有一段消息和一个确认按钮的警告框</li><li><code>confirm()</code>：显示带有一段消息和确认取消按钮的对话框</li><li><code>setInterval()</code>：按照指定的周期（毫秒）来调用函数或计算表达式</li><li><code>setTimeout()</code>：在指定的毫秒数后调用函数或计算表达式</li></ul></li></ul><h4 id="location">Location</h4><ul><li>地址栏对象</li><li>获取：使用window.location获取<ul><li><code>window.location.属性</code></li><li><code>location.属性</code></li></ul></li><li>属性：<ul><li><code>href</code>：设置或返回完整的url</li><li><code>location.href = "baidu.com"</code>：可以用来跳转</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;学就完了！&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JavaScript" scheme="https://ethanh3514.github.io/tags/JavaScript/"/>
    
    <category term="BOM" scheme="https://ethanh3514.github.io/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>SQL 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/23/SQL-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/23/SQL-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-23T11:25:51.000Z</published>
    <updated>2024-04-05T15:36:56.178Z</updated>
    
    <content type="html"><![CDATA[<p>记一些不好记的</p><span id="more"></span><h2 id="sql分类">SQL分类</h2><ul><li>DDL：数据定义语言</li><li>DML：数据操作语言</li><li>DQL：数据查询语言</li><li>DCL：数据控制语言</li></ul><h2 id="事务的四大特性acid">事务的四大特性（ACID）</h2><ul><li>原子性（Atomicity）：事务是不可分割的最小操作单元</li><li>一致性（Consistency）：事务完成时，必须使所有数据保持一致</li><li>隔离性（Isolation）：保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中数据的改变是永久的</li></ul><h3 id="并发事务问题">并发事务问题</h3><ul><li>脏读：一个事务读到另外一个事务还没有提交的数据</li><li>不可重复读：一个事务先后读取同一条记录，但两次读取的数据不同</li><li>幻读：一个事务按照条件查询数据时，没有对应的数据行，但是在插入数据时，又发现这行数据已经存在</li></ul><h3 id="事务隔离级别">事务隔离级别</h3><ul><li>Read uncommitted：脏读、不可重复读、幻读</li><li>Read committed（Oracle默认）：不可重复读、幻读</li><li>Repeatable Read（SQL默认）：幻读</li><li>Serializable</li></ul><p>从上到下性能依次降低，隔离级别逐渐提高</p><h2 id="性能优化">性能优化</h2><h3 id="查看执行频次">查看执行频次</h3><ul><li><code>show global status like 'Com%';</code>：展示当前数据库中各个操作已经进行的次数</li></ul><h3 id="慢查询日志">慢查询日志</h3><ul><li><p>记录了所有执行时间超过指定参数（ <code>long_query_time</code>秒）的所有SQL语句</p></li><li><p>默认没有开启，需要在MySQL的配置文件（ <code>/etc/my.cnf</code>）中配置：</p><ul><li><p><code>show variables like 'slow_query_log';</code></p></li><li><div class="sourceCode" id="cb1"><pre class="sourceCode sql"><code class="sourceCode sql"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>  # 开启MySQL慢查询日志开关</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  slow_query_log<span class="op">=</span><span class="dv">1</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  # 设置时间阈值为2秒</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  long_query_time<span class="op">=</span><span class="dv">2</span></span></code></pre></div></li><li><p><code>/var/lib/mysql/localhost-slow.log</code></p></li><li><p>用 <code>tail -f localhost-slow.log</code>可以看到持续的输出</p></li></ul></li></ul><h3 id="profile详情">profile详情</h3><ul><li><code>show profiles</code>可以在做SQL优化的时候看到时间都用在哪里</li><li>通过 <code>SELECT @@have_profiling</code>可以看到当前MySQL是否支持profile操作</li><li>默认 <code>profiling</code> 是关闭的，通过<code>SET profiling=1</code> 打开、</li><li><code>show profiles;</code>显示所有语句耗时</li></ul><h3 id="explain">explain</h3><ul><li>通过在sql语句前加explain获取执行计划</li><li>explain执行计划各字段含义：<ul><li>id：select查询的序列号，表示查询中执行select子句或者是操作表的顺序（id相同，执行顺序从上到下；id不同，值越大，越先执行）</li><li>select_type：表示select的类型，常见的有simple（简单表，不使用表连接或者子查询、primary（主查询，即外层的查询）、union（union中的第二个或者后面的查询语句）、subquery（select/where之后包含了子查询）等</li><li>type：表示连接类型，性能由好到差为：NULL、system、const、eq_ref、ref、range、index、all</li><li></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;记一些不好记的&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="SQL" scheme="https://ethanh3514.github.io/tags/SQL/"/>
    
    <category term="数据库" scheme="https://ethanh3514.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Java 字符串拼接原理</title>
    <link href="https://ethanh3514.github.io/2024/03/22/Java-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E5%8E%9F%E7%90%86/"/>
    <id>https://ethanh3514.github.io/2024/03/22/Java-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E5%8E%9F%E7%90%86/</id>
    <published>2024-03-22T09:25:23.000Z</published>
    <updated>2024-03-22T09:55:02.448Z</updated>
    
    <content type="html"><![CDATA[<p>常看常新</p><span id="more"></span><h3 id="常量字符串拼接">常量字符串拼接</h3><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> s <span class="op">=</span> <span class="st">"a"</span> <span class="op">+</span> <span class="st">"b"</span> <span class="op">+</span> <span class="st">"c"</span><span class="op">;</span><span class="co">//编译优化，直接就是 "abc"</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">);</span></span></code></pre></div><p>会复用串池的字符串</p><h3 id="拼接有变量字符串">拼接有变量字符串</h3><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> s1 <span class="op">=</span> <span class="st">"a"</span><span class="op">;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> s2 <span class="op">=</span> s1 <span class="op">+</span> <span class="st">"b"</span><span class="op">;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> s3 <span class="op">=</span> s2 <span class="op">+</span> <span class="st">"c"</span><span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s3<span class="op">);</span></span></code></pre></div><h4 id="jdk8以前">JDK8以前</h4><ul><li><p>底层使用<code>StringBuilder</code>拼接</p></li><li><p>每一步拼接都会创建新的<code>StringBuilder</code>，调用<code>append</code>方法，然后调用<code>toString()</code>方法，创建一个字符串对象。</p></li><li><p>每一次拼接都创建两个对象，开销比较大</p></li></ul><h4 id="jdk8">JDK8</h4><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> s1 <span class="op">=</span> <span class="st">"a"</span><span class="op">;</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> s2 <span class="op">=</span> <span class="st">"b"</span><span class="op">;</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> s3 <span class="op">=</span> <span class="st">"c"</span><span class="op">;</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> s4 <span class="op">=</span> s1 <span class="op">+</span> s2 <span class="op">+</span> s3<span class="op">;</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s4<span class="op">);</span></span></code></pre></div><ul><li>先预估字符串的长度，创建字符数组，产生一个新的字符串</li><li>预估也需要时间，多次加仍然比较慢</li></ul><h3 id="结论">结论</h3><p>多次拼接手动使用<code>StringBuilder</code></p><h3 id="stringbuilder扩展底层原理">StringBuilder扩展底层原理</h3><h4 id="无参构造">无参构造</h4><ul><li>创建时默认容量16，字节数组</li><li>添加的内容小于16，直接存</li><li>添加的内容大于16，扩容到（原来容量*2+2=34）</li><li>一次加的太多，扩容之后还不够，以实际长度为准</li></ul><h4 id="有参构造">有参构造</h4><ul><li>创建时默认容量为 <code>len + 16</code></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;常看常新&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="字符串拼接" scheme="https://ethanh3514.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5/"/>
    
    <category term="String" scheme="https://ethanh3514.github.io/tags/String/"/>
    
    <category term="原理" scheme="https://ethanh3514.github.io/tags/%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/21/Docker-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/21/Docker-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-21T11:01:36.000Z</published>
    <updated>2024-03-21T15:19:17.655Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><h3 id="常用命令">常用命令</h3><h4 id="docker-run">docker run</h4><pre class="shell"><code>docker run -d \    --name mysql \    -p 3306:3306 \    -e TZ=Asia/Shanghai \    -e MYSQL_ROOT_PASSWORD=123 \    mysql</code></pre><ul><li><code>docker run</code>：创建并运行一个容器，<code>-d</code>是让容器在后台运行</li><li><code>--name mysql</code>：给容器起一个名字，必须唯一</li><li><code>-p 3306:3306</code>：设置端口映射（宿主机端口：容器内端口）<ul><li>容器在宿主机运行，容器有自己的内存空间甚至IP地址，但这个IP是外部无法访问的</li><li>可以将容器的端口和宿主机的端口建立端口映射，通过访问宿主机的相应端口访问容器</li><li>容器内端口取决于进程，不需要改动</li></ul></li><li><code>-e KEY=VALUE</code>：设置环境变量<ul><li>环境变量由容器要求</li></ul></li><li><code>mysql</code>：指定运行的镜像的名字<ul><li>完整：<code>[repository]:[tag]</code></li><li>tag不写默认latest</li></ul></li></ul><h4 id="docker-images">docker images</h4><ul><li>查看本地镜像列表</li></ul><h4 id="docker-save">docker save</h4><ul><li>将镜像保存成包</li><li><code>docker save -o nginx.tar nginx:latest</code></li></ul><h4 id="docker-rmi">docker rmi</h4><ul><li>删除镜像</li><li><code>docker rmi nginx:latest</code></li></ul><h4 id="docker-load">docker load</h4><ul><li>加载镜像包</li><li><code>docker load -i nginx.tar</code></li></ul><h4 id="docker-ps">docker ps</h4><ul><li>查看当前运行容器</li><li><code>docker ps</code></li><li>只显示运行的容器<ul><li><code>docker ps -a</code></li><li>显示所有</li></ul></li></ul><h4 id="docker-stop">docker stop</h4><ul><li>停止容器</li><li><code>docker stop nginx</code></li></ul><h4 id="docker-start">docker start</h4><ul><li>启动容器</li><li><code>docker start nginx</code></li></ul><h4 id="docker-logs">docker logs</h4><ul><li>查看日志</li><li><code>docker logs nginx</code><ul><li><code>docker logs -f nginx</code></li><li><code>-f</code>：follow</li><li>一直查看日志，方便调试</li></ul></li></ul><h4 id="docker-exec">docker exec</h4><ul><li>进入容器</li><li><code>docker exec -it nginx bash</code></li></ul><h4 id="docker-rm">docker rm</h4><ul><li>删除容器</li><li><code>docker rm mysql</code></li></ul><h3 id="数据卷">数据卷</h3><ul><li>数据卷是一个虚拟目录，是容器内目录与宿主机目录之间映射的桥梁</li><li>创建数据卷会在宿主机文件系统<code>/var/lib/docker/volumes/卷名/_date</code>的位置</li><li>与容器内响应路径关联</li><li>可以使用宿主机内的编辑器修改容器内的文件内容</li><li>挂载需要再容器创建时就指定好，如果数据卷不存在会自动创建<ul><li><code>docker run -v 数据卷:数据卷目录</code></li></ul></li></ul><h4 id="常用命令-1">常用命令</h4><ul><li><code>docker volume create</code>：创建数据卷</li><li><code>docker volume ls</code>：查看所有数据卷</li><li><code>docker volume rm</code>：删除指定数据卷</li><li><code>docker volume inspect</code>：查看某个数据卷的详情</li><li><code>docker volume prune</code>：删除未使用的数据卷</li><li><code>docker inspect</code>：查看容器是否有数据卷挂载</li></ul><h4 id="匿名卷">匿名卷</h4><ul><li>容器运行自动创建的卷</li><li>不推荐使用，不方便迁移</li></ul><h4 id="自定义挂载">自定义挂载</h4><ul><li><code>docker run -v 本地目录:容器内目录</code></li><li>本地目录必须以<code>/</code>或<code>./</code>开头，否则会被认为是数据卷</li></ul><h3 id="自定义镜像">自定义镜像</h3><h4 id="结构">结构</h4><ul><li>逐层打包</li><li>可以利用已有的层</li></ul><h4 id="dockerfile">Dockerfile</h4><p>是一个文本文件，包含一个个指令，用指令来说明要执行什么操作</p><h5 id="指令">指令</h5><ul><li><code>FROM</code>：指定基础镜像<ul><li><code>FROM centos:6</code></li></ul></li><li><code>ENV</code>：设置环境变量<ul><li><code>ENV key value</code></li></ul></li><li><code>COPY</code>：拷贝本地文件到镜像的指定目录<ul><li><code>COPY ./jrell.tar.gz /tmp</code></li></ul></li><li><code>RUN</code>：执行Linux的shell命令<ul><li><code>RUN tar -zxvf /tmp/jrell.tar.gz &amp;&amp; EXPORTS path=/tmp/jrell:$path</code></li></ul></li><li><code>EXPOSE</code>：指定容器运行时监听的端口，是给镜像使用者看的<ul><li><code>EXPOSE 8080</code></li></ul></li><li><code>ENTRYPOINT</code>：镜像中应用的启动命令，容器运行时调用<ul><li><code>ENTRYPOINT java -jar xx.jar</code></li></ul></li></ul><h5 id="使用">使用</h5><ul><li>cd进目录下</li><li><code>docker build -t 镜像名 Dockerfile目录</code>：<code>docker build -t docker-demo .</code></li><li><code>.</code>是当前目录下的Dockerfile</li></ul><h3 id="容器网络互连">容器网络互连</h3><ul><li>默认情况下，所有容器都是以bridge方式连接导Docker的一个虚拟网桥上</li><li>运行Docker的时候会创建一个虚拟网卡：<code>docker0</code></li><li>同时给虚拟网卡创建一个虚拟网桥</li><li>容器通过网桥和各自的IP建立联系</li><li>但是这样分配的IP是动态的，各种情况可能会重新分配</li></ul><h4 id="自定义网络">自定义网络</h4><p>加入自定义网络的容器可以通过容器名相互访问</p><ul><li><p><code>docker network create</code></p></li><li><p><code>docker network ls</code></p></li><li><p><code>docker network rm</code></p></li><li><p><code>docker network prune</code></p></li><li><p><code>docker network connect</code></p></li><li><p><code>docker network disconnect</code></p></li><li><p><code>docker network inspect</code></p></li><li><p>可以在创建容器的时候直接加入网桥，就不会加入默认网桥了</p><ul><li><code>docker run --network</code></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Docker" scheme="https://ethanh3514.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>原码、反码、补码</title>
    <link href="https://ethanh3514.github.io/2024/03/20/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81/"/>
    <id>https://ethanh3514.github.io/2024/03/20/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81/</id>
    <published>2024-03-20T15:55:52.000Z</published>
    <updated>2024-03-20T16:12:36.372Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><h3 id="原码">原码</h3><ul><li>最左边是符号位，0为正、1为负</li><li>因为只有符号位控制符号，所以负数加正数会变小，负数减正数会变大，所以负数的运算会有问题</li></ul><h3 id="反码">反码</h3><ul><li>为了解决原码不能计算负数的问题而出现的</li><li>正数的反码不变，负数的反码在原码的基础上，符号位不变，数值取反，0变1,1变0</li><li>因为<code>-0</code>的存在，跨越<code>0</code>会有问题</li></ul><p><strong>例</strong>：</p><p>-56</p><ul><li>原码：10111000</li><li>反码：11000111</li></ul><h3 id="补码">补码</h3><ul><li>负数的补码是反码+1</li><li>正数的补码=原码=反码</li><li>一个字节可以表示范围为： -128~127</li></ul><h3 id="位运算符">位运算符</h3><ul><li><code>&lt;&lt;</code>：左移，低位补0</li><li><code>&gt;&gt;</code>：右移，高位补0或1。负数补1，正数补0</li><li><code>&gt;&gt;&gt;</code>：无符号右移，高位补0</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JDK和JRE</title>
    <link href="https://ethanh3514.github.io/2024/03/20/JDK%E5%92%8CJRE/"/>
    <id>https://ethanh3514.github.io/2024/03/20/JDK%E5%92%8CJRE/</id>
    <published>2024-03-20T15:45:04.000Z</published>
    <updated>2024-03-20T15:49:17.095Z</updated>
    
    <content type="html"><![CDATA[<p>owo</p><span id="more"></span><h3 id="jdkjava-development-kit">JDK（Java Development kit）</h3><ul><li>Java开发工具包</li></ul><h4 id="包含">包含</h4><ul><li>JVM（Java Virtual Machine）：Java虚拟机</li><li>核心类库</li><li>开发工具<ul><li>javac 编译工具</li><li>java 运行工具</li><li>jdb 调试工具</li><li>jhat 内存分析工具</li></ul></li></ul><h3 id="jrejava-runtime-environment">JRE（Java RuntimeEnvironment）</h3><ul><li>Java运行环境</li></ul><h4 id="包含-1">包含</h4><ul><li>JVM</li><li>核心类库</li><li>运行工具</li></ul><p>JDK包含JRE包含JVM</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;owo&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JDK" scheme="https://ethanh3514.github.io/tags/JDK/"/>
    
    <category term="JRE" scheme="https://ethanh3514.github.io/tags/JRE/"/>
    
  </entry>
  
  <entry>
    <title>Java 动态代理 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/20/Java-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/20/Java-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-20T15:20:16.000Z</published>
    <updated>2024-03-20T15:38:48.062Z</updated>
    
    <content type="html"><![CDATA[<p>可以无侵入式的给代码增加额外的功能</p><span id="more"></span><p>对象可以通过代理来转移部分职责</p><ul><li>调用过程：调用者 -&gt; 代理 -&gt; 对象</li><li>代理里面就是对象要被代理的方法</li><li>Java通过接口保证代理的样子，对象和代理需要实现同一个接口，接口中是被代理的所有方法</li></ul><h3 id="创建代理对象">创建代理对象</h3><ul><li><code>java.lang.reflect.Proxy</code>类：提供了为对象产生代理对象的方法</li><li><code>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code><ul><li>参数一：指定类加载器，加载生成的代理类</li><li>参数二：指定接口，这些接口用于指定代理有哪些方法</li><li>参数三：指定生成的代理对象要干什么</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;可以无侵入式的给代码增加额外的功能&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="动态代理" scheme="https://ethanh3514.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/20/Java-%E5%8F%8D%E5%B0%84-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/20/Java-%E5%8F%8D%E5%B0%84-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-20T14:16:38.000Z</published>
    <updated>2024-03-20T15:18:14.162Z</updated>
    
    <content type="html"><![CDATA[<p>反射允许对成员变量、成员方法和构造方法的信息进行编程访问</p><span id="more"></span><p>反射可以获取类中所有信息</p><p>获取 -&gt; 解剖</p><p>获取是从class文件中获取</p><h3 id="获取class对象">获取class对象</h3><ul><li><code>Class.forName("全类名")</code> 全类名：包名+类名</li><li><code>类名.class</code></li><li><code>对象.getClass()</code></li></ul><h4 id="什么时候使用哪种">什么时候使用哪种</h4><ul><li><strong>源代码阶段</strong>：java文件 -&gt;class文件，只在硬盘内操作。使用第一种</li><li><strong>加载阶段</strong>：class文件进入内存。使用第二种</li><li><strong>运行阶段</strong>：创建了类的对象。使用第三种</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">//最为常用的方式</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="bu">Class</span> clazz <span class="op">=</span> <span class="bu">Class</span><span class="op">.</span><span class="fu">forName</span><span class="op">(</span><span class="st">"package1.Student"</span><span class="op">);</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co">//更多的是当做参数进行传递</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="bu">Class</span> clazz2 <span class="op">=</span> Student<span class="op">.</span><span class="fu">class</span><span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">//当已经有了这个类的对象时才可以使用</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>Student s <span class="op">=</span> <span class="kw">new</span> <span class="fu">Student</span><span class="op">();</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="bu">Class</span> clazz3 <span class="op">=</span> s<span class="op">.</span><span class="fu">getClass</span><span class="op">();</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>clazz1 <span class="op">==</span> clazz2<span class="op">);</span><span class="co">//true</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>clazz2 <span class="op">==</span> clazz3<span class="op">);</span><span class="co">//true</span></span></code></pre></div><h3 id="java中万物皆对象">Java中万物皆对象</h3><ul><li>class文件可以看作Class类的对象</li><li>构造方法可以看作Constructor类的对象</li><li>成员变量可以看作Field的对象</li><li>成员方法可以看作Method的对象</li></ul><h4 id="获取构造方法">获取构造方法</h4><ul><li><code>Constructor&lt;?&gt;[] getConstructors()</code>：返回所有<code>public</code>构造方法对象的数组</li><li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code>：返回所有构造方法对象的数组</li><li><code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code>：返回单个<code>public</code>构造方法对象</li><li><code>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code>：返回单个构造方法对象</li></ul><p>Constructor类中用于创建对象的方法</p><ul><li><code>T newInstance(Object... initargs)</code>：根据指定的构造方法创建对象</li><li><code>setAccessible(boolean flag)</code>：设置为true，表示取消访问检查</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">Class</span> clazz <span class="op">=</span> <span class="bu">Class</span><span class="op">.</span><span class="fu">forName</span><span class="op">(</span><span class="st">"package1.Student"</span><span class="op">);</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="bu">Constructor</span><span class="op">[]</span> cons <span class="op">=</span> clazz<span class="op">.</span><span class="fu">getConstructors</span><span class="op">();</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">//获取单个构造方法的参数传入要获取的构造方法参数的字节码文件</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="bu">Constructor</span> con1 <span class="op">=</span> clazz<span class="op">.</span><span class="fu">getDeclaredConstructor</span><span class="op">(</span><span class="bu">String</span><span class="op">.</span><span class="fu">class</span><span class="op">);</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co">//获取参数列表</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="bu">Parameter</span><span class="op">[]</span> parameters <span class="op">=</span> con1<span class="op">.</span><span class="fu">getParameters</span><span class="op">();</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(</span><span class="bu">Parameter</span> parameter <span class="op">:</span> parameters<span class="op">)</span> <span class="op">{</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>parameter<span class="op">);</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="co">//创建对象</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="co">//无法直接利用非public的方法</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="co">//暴力反射：临时取消权限校验</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>con1<span class="op">.</span><span class="fu">setAccessible</span><span class="op">(</span><span class="kw">true</span><span class="op">);</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>Student s1 <span class="op">=</span> <span class="op">(</span>Student<span class="op">)</span>con1<span class="op">.</span><span class="fu">newInstance</span><span class="op">(</span><span class="st">"Lin"</span><span class="op">);</span></span></code></pre></div><h4 id="获取成员变量">获取成员变量</h4><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">//获取class字节码文件对象</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">Class</span> clazz <span class="op">=</span> <span class="bu">Class</span><span class="op">.</span><span class="fu">forName</span><span class="op">(</span><span class="st">"package1.Student"</span><span class="op">);</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">//获取成员变量</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>Filed<span class="op">[]</span> fileds <span class="op">=</span> clazz<span class="op">.</span><span class="fu">getDeclaredFields</span><span class="op">();</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(</span>Filed filed <span class="op">:</span> fileds<span class="op">)</span> <span class="op">{</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>filed<span class="op">);</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="co">//获取单个成员变量</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="bu">Field</span> gender <span class="op">=</span> clazz<span class="op">.</span><span class="fu">getFiled</span><span class="op">(</span><span class="st">"gender"</span><span class="op">);</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>gender<span class="op">);</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="co">//获取权限修饰符</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> modifiers <span class="op">=</span> gender<span class="op">.</span><span class="fu">getModifiers</span><span class="op">();</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>modifiers<span class="op">);</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="co">//获取成员变量的名字</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> n <span class="op">=</span> gender<span class="op">.</span><span class="fu">getName</span><span class="op">();</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>n<span class="op">);</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="co">//获取成员变量的数据类型</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="bu">Class</span><span class="op">&lt;?&gt;</span> type <span class="op">=</span> gender<span class="op">.</span><span class="fu">getType</span><span class="op">();</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>type<span class="op">);</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="co">//获取成员变量记录的值</span></span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>Student s <span class="op">=</span> <span class="kw">new</span> <span class="fu">Student</span><span class="op">(</span><span class="st">"zhangsan"</span><span class="op">,</span> <span class="dv">23</span><span class="op">,</span> <span class="st">"boy"</span><span class="op">);</span></span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>name<span class="op">.</span><span class="fu">setAccessible</span><span class="op">(</span><span class="kw">true</span><span class="op">);</span></span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> value <span class="op">=</span> <span class="op">(</span><span class="bu">String</span><span class="op">)</span>gender<span class="op">.</span><span class="fu">get</span><span class="op">(</span>s<span class="op">);</span></span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>value<span class="op">);</span></span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a><span class="co">//修改对象里面记录的值</span></span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>gender<span class="op">.</span><span class="fu">set</span><span class="op">(</span>s<span class="op">,</span> <span class="st">"girl"</span><span class="op">);</span></span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">);</span></span></code></pre></div><h4 id="获取成员方法">获取成员方法</h4><ul><li><code>Method[] getMethods()</code></li><li><code>Method[] getDeclaredMethods()</code></li></ul><p>类似</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;反射允许对成员变量、成员方法和构造方法的信息进行编程访问&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="反射" scheme="https://ethanh3514.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java 网络编程 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/20/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/20/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-20T12:15:30.000Z</published>
    <updated>2024-03-20T14:15:33.303Z</updated>
    
    <content type="html"><![CDATA[<p>owo</p><span id="more"></span><h3 id="csbs">CS/BS</h3><ul><li>常见软件架构</li></ul><h4 id="cs">C/S</h4><ul><li>Client/Server</li></ul><h4 id="bs">B/S</h4><ul><li>Browser/Server</li></ul><h3 id="网络编程三要素">网络编程三要素</h3><ul><li><p>IP</p></li><li><p>端口号</p></li><li><p>协议</p></li></ul><h2 id="java.net包">java.net包</h2><p>表示IP地址</p><h3 id="inetaddress类">InetAddress类</h3><h4 id="方法">方法</h4><ul><li><code>static InetAddress getByName(String host)</code>：确定主机的IP。主机名可以是机器名，也可以是IP</li><li><code>String getHostName()</code>：获取此IP的主机名</li><li><code>String getHostAddress()</code>：返回文本显示中的IP地址字符串</li></ul><h3 id="协议">协议</h3><h4 id="udp">UDP</h4><ul><li>面向无连接</li><li>用户数据包协议（User Datagram Protocol）</li><li>速度快、一次最多发64K，易丢失</li></ul><h5 id="发送数据">发送数据</h5><ul><li>创建发送端的DatagramSocket</li><li>数据打包</li><li>发送数据</li><li>释放资源</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">//创建对象时底层绑定端口，作为发出的端口</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">//空参：所有可用端口中随机一个使用</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">//有参：指定端口</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="bu">DatagramSocket</span> ds <span class="op">=</span> <span class="kw">new</span> <span class="bu">DatagramSocket</span><span class="op">();</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">//打包数据</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> str <span class="op">=</span> <span class="st">"Hello"</span><span class="op">;</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="dt">byte</span><span class="op">[]</span> bytes <span class="op">=</span> str<span class="op">.</span><span class="fu">getBytes</span><span class="op">();</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="bu">InetAddress</span> address <span class="op">=</span> <span class="bu">InetAddress</span><span class="op">.</span><span class="fu">getByName</span><span class="op">(</span><span class="st">"127.0.0.1"</span><span class="op">);</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> port <span class="op">=</span> <span class="dv">10086</span><span class="op">;</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="bu">DatagramPacket</span> dp <span class="op">=</span> <span class="kw">new</span> <span class="bu">DatagramPacket</span><span class="op">(</span>bytes<span class="op">,</span> bytes<span class="op">.</span><span class="fu">length</span><span class="op">,</span> address<span class="op">,</span> port<span class="op">);</span><span class="co">//发到 port 这个端口</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="co">//发送数据</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>ds<span class="op">.</span><span class="fu">send</span><span class="op">(</span>dp<span class="op">);</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="co">//释放资源</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>ds<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h5 id="接收数据">接收数据</h5><ul><li>创建接收端的DatagramSocket对象</li><li>接收打包好的数据</li><li>解析数据包</li><li>释放资源</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">//接收的时候一定要绑定端口</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">DatagramSocket</span> ds <span class="op">=</span> <span class="kw">new</span> <span class="bu">DatagramSocket</span><span class="op">(</span><span class="dv">10086</span><span class="op">);</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">//接收数据包</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="dt">byte</span><span class="op">[]</span> bytes <span class="op">=</span> <span class="kw">new</span> <span class="dt">byte</span><span class="op">[</span><span class="dv">1024</span><span class="op">];</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="bu">DatagramPacket</span> dp <span class="op">=</span> <span class="kw">new</span> <span class="bu">DatagramPacket</span><span class="op">(</span>bytes<span class="op">,</span> bytes<span class="op">.</span><span class="fu">length</span><span class="op">);</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co">//这个方法是阻塞的</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="co">//执行到这一步会死等</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>ds<span class="op">.</span><span class="fu">receive</span><span class="op">(</span>dp<span class="op">);</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="co">//解析数据包</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="dt">byte</span><span class="op">[]</span> data <span class="op">=</span> dp<span class="op">.</span><span class="fu">getData</span><span class="op">();</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> len <span class="op">=</span> dp<span class="op">.</span><span class="fu">getLength</span><span class="op">();</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="bu">InetAddress</span> address <span class="op">=</span> dp<span class="op">.</span><span class="fu">getAddress</span><span class="op">();</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> port <span class="op">=</span> dp<span class="op">.</span><span class="fu">getPort</span><span class="op">();</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="kw">new</span> <span class="bu">String</span><span class="op">(</span>data<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> len<span class="op">));</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>address <span class="op">+</span> <span class="st">" "</span> <span class="op">+</span> port<span class="op">);</span></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="co">//释放资源</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>ds<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h5 id="三种通信方式">三种通信方式</h5><ul><li>单播</li><li>组播</li><li>广播</li></ul><h4 id="tcp">TCP</h4><ul><li>面向连接</li><li>传输控制协议（Transmission Control Protocol）</li><li>速度慢、没大小限制，数据安全</li><li>通过Socket产生IO流进行网络通信</li></ul><h5 id="客户端">客户端</h5><ul><li>创建客户端的Socket对象（<code>Socket</code>），与指定服务端连接</li><li>获取输出流，写数据</li><li>释放资源</li></ul><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">//在创建对象的同时会连接服务器</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">//连接不上会报错</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="bu">Socket</span> socket <span class="op">=</span> <span class="kw">new</span> <span class="bu">Socket</span><span class="op">(</span><span class="st">"127.0.0.1"</span><span class="op">,</span> <span class="dv">10000</span><span class="op">);</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="co">//可以从连接通道中获取输出流</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="bu">OutputStream</span> os <span class="op">=</span> socket<span class="op">.</span><span class="fu">getOutputStream</span><span class="op">();</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="co">//写数据</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>os<span class="op">.</span><span class="fu">write</span><span class="op">(</span><span class="st">"Hello"</span><span class="op">.</span><span class="fu">getBytes</span><span class="op">());</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="co">//释放资源</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>os<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>socket<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h5 id="服务器">服务器</h5><ul><li>创建服务器端的Socket对象（<code>ServerSocket</code>）</li><li>监听客户端连接，返回一个Socket对象</li><li>获取输入流，读数据，并把数据显示在控制台</li><li>释放资源</li></ul><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="bu">ServerSocket</span> ss <span class="op">=</span> <span class="kw">new</span> <span class="bu">ServerSocket</span><span class="op">(</span><span class="dv">10000</span><span class="op">);</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co">//如果没有连接就会死等</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="bu">Socket</span> socket <span class="op">=</span> ss<span class="op">.</span><span class="fu">accept</span><span class="op">();</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="bu">InputStream</span> is <span class="op">=</span> socket<span class="op">.</span><span class="fu">getInputStream</span><span class="op">();</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> b<span class="op">;</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>b <span class="op">=</span> is<span class="op">.</span><span class="fu">read</span><span class="op">())</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">((</span>cahr<span class="op">)</span>b<span class="op">);</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>socket<span class="op">.</span><span class="fu">close</span><span class="op">();</span><span class="co">//断开连接</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>ss<span class="op">.</span><span class="fu">close</span><span class="op">();</span><span class="co">//关闭服务器</span></span></code></pre></div><p><strong>注意</strong>：这里是字节流，会出现中文乱码。类比之前的字符流可以解决</p><h5 id="三次握手">三次握手</h5><ul><li>客户端向服务器发出连接请求，等待服务器确认</li><li>服务器向客户端返回一个响应，告诉客户端收到了请求</li><li>客户端向服务端再次发出确认，连接建立</li></ul><h5 id="四次挥手">四次挥手</h5><ul><li>客户端向服务端发出取消连接请求</li><li>服务端向客户端返回一个请求，表示收到客户端取消请求</li><li>服务端将最后的数据处理完毕之后，再次向客户端发出确认取消信息</li><li>客户端再次发送确认消息，连接断开</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;owo&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="网络编程" scheme="https://ethanh3514.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/16/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/16/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-16T12:39:10.000Z</published>
    <updated>2024-03-23T03:56:21.459Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><ul><li>并发：在同一时刻，有多个指令在单个CPU上<strong>交替</strong>执行</li><li>并行：在同一时刻，有多个指令在多个CPU上<strong>同时</strong>执行</li></ul><h3 id="多线程的实现方式">多线程的实现方式</h3><h4 id="继承thread类">继承Thread类</h4><p>重写run方法</p><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">//MyThread.java</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> MyThread <span class="kw">extends</span> <span class="bu">Thread</span> <span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">@Override</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">run</span><span class="op">()</span> <span class="op">{</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co">//ThreadDemo.java</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>MyThread t <span class="op">=</span> <span class="kw">new</span> <span class="fu">MyThread</span><span class="op">();</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>t<span class="op">.</span><span class="fu">start</span><span class="op">();</span></span></code></pre></div><h4 id="实现runnable接口">实现Runnable接口</h4><p>重写run方法</p><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">//MyRun.java</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> MyRun <span class="kw">implements</span> <span class="bu">Runnable</span> <span class="op">{</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">@Override</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">run</span><span class="op">()</span> <span class="op">{</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="bu">Thread</span><span class="op">.</span><span class="fu">currentThread</span><span class="op">().</span><span class="fu">getName</span><span class="op">()</span> <span class="op">+</span> <span class="st">"Hello"</span><span class="op">);</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="co">//ThreadDemo.java</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>MyRun a <span class="op">=</span> <span class="kw">new</span> <span class="fu">MyRun</span><span class="op">();</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="bu">Thread</span> t1 <span class="op">=</span> <span class="kw">new</span> <span class="bu">Thread</span><span class="op">(</span>a<span class="op">);</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="bu">Thread</span> t2 <span class="op">=</span> <span class="kw">new</span> <span class="bu">Thread</span><span class="op">(</span>a<span class="op">);</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>t1<span class="op">.</span><span class="fu">start</span><span class="op">();</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>t2<span class="op">.</span><span class="fu">start</span><span class="op">();</span></span></code></pre></div><h4 id="利用callable接口和future接口">利用Callable接口和Future接口</h4><ul><li>可以获取到多线程运行的结果</li></ul><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">//MyCallable.java</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> MyCallable <span class="kw">implements</span> <span class="bu">Callable</span><span class="op">&lt;</span><span class="bu">Integer</span><span class="op">&gt;</span> <span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">@Override</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="bu">Integer</span> <span class="fu">call</span><span class="op">()</span> <span class="kw">throws</span> <span class="bu">Exception</span> <span class="op">{</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> sum <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">100</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>            sum <span class="op">+=</span> i<span class="op">;</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> sum<span class="op">;</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co">//ThreadDemo.java</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="co">//创建MyCallable对象，表示多线程要执行的任务</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>MyCallable mc <span class="op">=</span> <span class="kw">new</span> <span class="fu">MyCallable</span><span class="op">();</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="co">//创建FutureTask对象，管理多线程运行的结果</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="bu">FutureTask</span><span class="op">&lt;</span><span class="bu">Integer</span><span class="op">&gt;</span> ft <span class="op">=</span> <span class="kw">new</span> <span class="bu">FutureTask</span><span class="op">&lt;&gt;(</span>mc<span class="op">);</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="bu">Thread</span> t1 <span class="op">=</span> <span class="kw">new</span> <span class="bu">Thread</span><span class="op">(</span>ft<span class="op">);</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>t1<span class="op">.</span><span class="fu">start</span><span class="op">();</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="co">//获取多线程运行的结果</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="bu">Integer</span> result <span class="op">=</span> ft<span class="op">.</span><span class="fu">get</span><span class="op">();</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>result<span class="op">);</span></span></code></pre></div><h3 id="常见成员方法">常见成员方法</h3><ul><li><code>String getName()</code>：返回线程名字</li><li><code>void setName(String name)</code>：设置线程名字，默认名字：Thread-X（X从0开始）</li><li><code>static Thread currentThread()</code>：获取当前线程的对象</li><li><code>static void sleep(long time)</code>：让线程休眠指定毫秒时间</li><li><code>setPriority(int newPriority)</code>：设置线程优先级（1~10），默认是5。优先级越高，越容易抢到cpu</li><li><code>final int getPriority()</code>：获取优先级</li><li><code>final void setDaemon(boolean on)</code>：设置为守护线程</li><li><code>public static void yield()</code>：出让线程/礼让线程，出让当前cpu的执行权</li><li><code>public static void join()</code>：插入线程/插队线程</li></ul><h3 id="调度">调度</h3><p>java中用的是抢占式调度，线程优先级越高，越容易抢到cpu</p><h3 id="守护线程">守护线程</h3><p>当其他的非守护线程执行完毕后，守护线程会陆续结束</p><h3 id="同步代码块">同步代码块</h3><ul><li>把操作共享数据的代码锁起来</li><li>锁默认打开，进去一个线程就关闭</li><li>里面线程出来再打开</li></ul><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">synchronized</span><span class="op">(</span>锁<span class="op">)</span> <span class="op">{</span><span class="co">//锁对象是任意唯一对象，可以用当前类的字节码文件（MyThread.class）</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h3 id="同步方法">同步方法</h3><ul><li>把synchronized关键字加到方法上</li><li><code>修饰符 synchronized 返回值类型 方法名(){}</code></li><li>同步方法是锁住方法里面所有的代码</li><li>锁对象不能自己指定<ul><li>当前方法非静态：this</li><li>当前方法静态：当前类的字节码文件对象</li></ul></li></ul><h3 id="lock锁">Lock锁</h3><ul><li>JDK5以后有的</li><li>提供了获得锁和释放锁的方法<ul><li><code>void lock()</code>：获得锁</li><li><code>void unlock()</code>：释放锁</li></ul></li><li>Lock是接口不能直接实例化</li></ul><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="bu">Lock</span> lock <span class="op">=</span> <span class="kw">new</span> <span class="bu">ReentrantLock</span><span class="op">();</span></span></code></pre></div><h3 id="常见方法">常见方法</h3><p>用锁使用方法</p><ul><li><code>void wait()</code>：当前线程等待，直到被其他线程唤醒</li><li><code>void notify()</code>：随机唤醒单个线程</li><li><code>void notifyAll()</code>：唤醒所有线程</li></ul><h3 id="阻塞队列">阻塞队列</h3><ul><li>实现了<code>Iterable</code>、<code>Collection</code>、<code>Queue</code>、<code>BlockingQueue</code>这些接口</li><li>有<code>ArrayBlockingQueue</code>和<code>LinkedBlockingQueue</code>两种实现方式</li><li>不需要额外写锁</li></ul><h4 id="方法">方法</h4><ul><li><code>put</code>, ``</li></ul><h3 id="线程池">线程池</h3><h4 id="executors">Executors</h4><p>线程池的工具类通过调用方法返回不同类型的线程池对象</p><ul><li><code>public static ExecutorService newCachedThreadPool()</code>：创建一个上限为INT_MAX的线程池对象</li><li><code>public static ExecutorService newFixedThreadPool(int nThreads)</code>：创建有上限的线程池</li></ul><h4 id="成员方法">成员方法</h4><ul><li><code>submit()</code>：提交任务</li><li><code>shutdown()</code>：销毁线程池</li></ul><h3 id="线程池多大合适">线程池多大合适</h3><ul><li>CPU密集型运算： <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="15.209ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 6722.4 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">大</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">并</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mo" transform="translate(5222.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6222.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></span></li><li>I/O密集型运算： <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.158ex;" xmlns="http://www.w3.org/2000/svg" width="58.733ex" height="3.447ex" role="img" focusable="false" viewBox="0 -1011.8 25960.2 1523.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">最</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">大</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">并</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">行</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mo" transform="translate(5222.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(5944.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">期</text></g><g data-mml-node="mi" transform="translate(6944.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">望</text></g><g data-mml-node="mi" transform="translate(7944.4,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(8704.4,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(9455.4,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mi" transform="translate(10222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">利</text></g><g data-mml-node="mi" transform="translate(11222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">用</text></g><g data-mml-node="mi" transform="translate(12222.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">率</text></g><g data-mml-node="mo" transform="translate(13444.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mfrac" transform="translate(14166.9,0)"><g data-mml-node="mrow" transform="translate(220,481.4) scale(0.707)"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">总</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">（</text></g><g data-mml-node="mi" transform="translate(4000,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(4760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(5511,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mi" transform="translate(6278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">计</text></g><g data-mml-node="mi" transform="translate(7278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">算</text></g><g data-mml-node="mi" transform="translate(8278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(9278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mo" transform="translate(10278,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(11056,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">等</text></g><g data-mml-node="mi" transform="translate(12056,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">待</text></g><g data-mml-node="mi" transform="translate(13056,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(14056,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g><g data-mml-node="mi" transform="translate(15056,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">）</text></g></g><g data-mml-node="mrow" transform="translate(3677,-370.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(1511,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mi" transform="translate(2278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">计</text></g><g data-mml-node="mi" transform="translate(3278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">算</text></g><g data-mml-node="mi" transform="translate(4278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">时</text></g><g data-mml-node="mi" transform="translate(5278,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">间</text></g></g><rect width="11553.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="多线程" scheme="https://ethanh3514.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java IO流 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/15/Java-IO%E6%B5%81-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/15/Java-IO%E6%B5%81-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-15T14:09:13.000Z</published>
    <updated>2024-03-16T12:37:56.197Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><h3 id="io流分类">IO流分类</h3><h4 id="字节流">字节流</h4><ul><li>可以操作所有类型的文件</li><li>读取文件的时候不要有中文</li><li>每次只能操作一个字节（整数不能超过一个字节）</li></ul><h5 id="子类">子类</h5><ul><li>InputStream</li><li>OutputStream</li></ul><h4 id="字符流">字符流</h4><ul><li>只能操作纯文本文件</li></ul><h5 id="子类-1">子类</h5><ul><li>Reader</li><li>Writer</li></ul><h2 id="字节流-1">字节流</h2><h3 id="字节输出流">字节输出流</h3><ul><li><code>FileOutputStream(File filename, boolean append)</code></li><li><code>FileOutputStream(String filepath)</code></li></ul><h3 id="字节输入流">字节输入流</h3><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileInputStream</span> fis <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> b<span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>b <span class="op">=</span> fis<span class="op">.</span><span class="fu">read</span><span class="op">())</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">((</span><span class="dt">char</span><span class="op">)</span>b<span class="op">);</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>fis<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h3 id="文件拷贝">文件拷贝</h3><p>小文件</p><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileInputStream</span> fis <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">FileOutputStream</span> fos <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> b<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>b <span class="op">=</span> fis<span class="op">.</span><span class="fu">read</span><span class="op">())</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    fos<span class="op">.</span><span class="fu">write</span><span class="op">(</span>b<span class="op">);</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">//释放资源</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co">//先开的最后关闭</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>fos<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>fis<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><p>文件大的时候一次次read()太慢</p><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileInputStream</span> fis <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">FileOutputStream</span> fos <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">byte</span><span class="op">[]</span> buf <span class="op">=</span> <span class="kw">new</span> <span class="dt">byte</span><span class="op">[</span><span class="dv">1024</span> <span class="op">*</span> <span class="dv">1024</span> <span class="op">*</span> <span class="dv">5</span><span class="op">];</span><span class="co">//一般取1024的倍数</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>len <span class="op">=</span> fis<span class="op">.</span><span class="fu">read</span><span class="op">(</span>buf<span class="op">))</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    fos<span class="op">.</span><span class="fu">write</span><span class="op">(</span>buf<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> len<span class="op">);</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>fos<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>fis<span class="op">.</span><span class="fu">close</span><span class="op">();</span> </span></code></pre></div><h2 id="字符流-1">字符流</h2><ul><li>字符流 = 字节流 + 字符集</li></ul><h4 id="特点">特点</h4><ul><li>输入流：一次读一个字节，遇到中文时，一次读多个字节</li><li>输出流：底层把数据按照指定的编码方式进行编码，变成字节再写到文件中</li></ul><h4 id="使用场景">使用场景</h4><ul><li>操作纯文本文件</li></ul><h4 id="filereader">FileReader</h4><ul><li><code>public int read()</code>：读取数据，到末尾返回 -1</li><li><code>public int read(char[] buffer)</code>：读取多个数据，到末尾返回-1<ul><li>细节：按字节进行读取，遇到中文，一次读多个字节，读取后解码，返回一个十进制整数，代表在字符集上的数字</li><li>字符流的底层也是字节流</li></ul></li></ul><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileReader</span> fr <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileReader</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> ch<span class="op">;</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>ch <span class="op">=</span> fr<span class="op">.</span><span class="fu">read</span><span class="op">())</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">((</span><span class="dt">char</span><span class="op">)</span>ch<span class="op">);</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>fr<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileReader</span> fr <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileReader</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span><span class="op">[]</span> ch <span class="op">=</span> <span class="kw">new</span> <span class="dt">char</span><span class="op">[</span><span class="dv">10</span><span class="op">];</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> len<span class="op">;</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co">//read(chars)：把读取数据、解码、强转三步合并了，把强转之后的字符放到数组当中</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="co">//空参的read + 强制类型转换</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>len <span class="op">=</span> fr<span class="op">.</span><span class="fu">read</span><span class="op">(</span>ch<span class="op">))</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="kw">new</span> <span class="bu">String</span><span class="op">(</span>ch<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> len<span class="op">));</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>fr<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h4 id="filewriter">FileWriter</h4><div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileWriter</span> fw <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileWriter</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>fw<span class="op">.</span><span class="fu">write</span><span class="op">(</span><span class="dv">25105</span><span class="op">);</span><span class="co">//根据字符集的编码方式编码，把编码之后的数据写到文件中</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>fw<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><div class="sourceCode" id="cb7"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileWriter</span> fw <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileWriter</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span><span class="op">[]</span> ch <span class="op">=</span> <span class="op">{</span><span class="ch">'a'</span><span class="op">,</span> <span class="ch">'b'</span><span class="op">,</span> <span class="ch">'c'</span><span class="op">,</span> <span class="er">'</span>我<span class="er">'</span><span class="op">};</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>fw<span class="op">.</span><span class="fu">write</span><span class="op">(</span>ch<span class="op">);</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>fw<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h4 id="字符流底层原理">字符流底层原理</h4><ul><li>创建字符输入流对象<ul><li>关联文件，并创建缓冲区（长度为8192的字节数组）（字节流无缓冲区）</li></ul></li><li>读取数据<ul><li>判断缓冲区中是否有数据<ul><li>缓冲区无数据：从文件中获取数据，装入缓冲区，尽可能装满</li><li>缓冲区有数据：从缓冲区读取</li></ul></li><li>空参read：一次读取一个字节，遇到中文一次读多个字节，把字节解码转成十进制返回</li><li>有参read：读取字节、解码、强转三步合并，强转后的字符放到数组中</li></ul></li><li>输出数据<ul><li>在内存中创建一个8192的缓冲区，每一次write都会把内容编码写进缓冲区里，出现下面的情况时，会把缓冲区内容写入文件<ul><li>缓冲区满</li><li>刷新（<code>flush()</code>）</li><li>关流（<code>close()</code>）</li></ul></li></ul></li></ul><h2 id="缓冲流">缓冲流</h2><p>加了缓冲区的基本流</p><h3 id="字节缓冲流">字节缓冲流</h3><ul><li><code>public BufferedInputStream(InputStream is)</code></li><li><code>public BufferedOutputStream(OutputStream os)</code></li></ul><h3 id="字符缓冲流">字符缓冲流</h3><p>因为字符基本流已经有缓冲区了，所以效率提高不明显</p><ul><li><code>BufferedReader</code></li><li><code>BufferedWriter</code></li></ul><p>主要体现在两个比较好用的方法</p><ul><li>输入流：<code>public String readLine()</code>：读取一行数据，如果没数据了，返回null。<strong>但是不会读取回车换行</strong></li><li>输出流：<code>public void newLine()</code>：跨平台的换行</li></ul><h2 id="转换流">转换流</h2><p>是字符流和字节流之间的桥梁</p><p>数据源 -&gt; 字节流 -&gt; 转换流 -&gt; 内存 -&gt; 转换流 -&gt; 字节流-&gt;目的文件</p><ul><li><code>InputStreamReader</code></li><li><code>OutputStreamWriter</code></li></ul><div class="sourceCode" id="cb8"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="bu">InputStreamReader</span> isr <span class="op">=</span> <span class="kw">new</span> <span class="bu">InputStreamReader</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">),</span> <span class="st">"GBK"</span><span class="op">);</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> ch<span class="op">;</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>ch <span class="op">=</span> isr<span class="op">.</span><span class="fu">read</span><span class="op">())</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">print</span><span class="op">((</span><span class="dt">char</span><span class="op">)</span>ch<span class="op">);</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>isr<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><div class="sourceCode" id="cb9"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="bu">OutputStreamWriter</span> osw <span class="op">=</span> <span class="kw">new</span> <span class="bu">OutputStreamWriter</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">),</span> <span class="st">"GBK"</span><span class="op">);</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>osw<span class="op">.</span><span class="fu">write</span><span class="op">(</span><span class="st">"你好"</span><span class="op">);</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>osw<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><p><strong>JDK11</strong>后把<code>FileInputStream</code>和<code>FileOutputStream</code>的构造方法加入了字符编码</p><div class="sourceCode" id="cb10"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">//将本地文件中的GBK文件，转成UTF-8</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="bu">InputStreamReader</span> isr <span class="op">=</span> <span class="kw">new</span> <span class="bu">InputStreamReader</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">),</span> <span class="st">"GBK"</span><span class="op">);</span></span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="bu">OutputStreamWriter</span> osw <span class="op">=</span> <span class="kw">new</span> <span class="bu">OutputStreamWriter</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">),</span> <span class="st">"UTF-8"</span><span class="op">);</span></span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> b<span class="op">;</span></span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>b <span class="op">=</span> isr<span class="op">.</span><span class="fu">read</span><span class="op">())</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>    osw<span class="op">.</span><span class="fu">write</span><span class="op">(</span>b<span class="op">);</span></span><span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>osw<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span><span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>isr<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h3 id="练习">练习</h3><div class="sourceCode" id="cb11"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">//用字节流读文件中数据，一次读一行，不能出现乱码</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="co">//1.字节流在读中文的时候，会出现乱码，用字符流没事</span></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co">//2.字节流里面是没有读一行的方法，字符缓冲流可以</span></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="co">//FileInputStream fis = new FileInputStream("");</span></span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="co">//InputStreamReader isr = new InputStreamReader(fis);</span></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="co">//BufferedReader br = new BufferedReader(isr);</span></span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="bu">BufferedReader</span> br <span class="op">=</span> <span class="kw">new</span> <span class="bu">BufferedReader</span><span class="op">(</span><span class="kw">new</span> <span class="bu">InputStreamReader</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">)));</span></span><span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> str<span class="op">;</span></span><span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>str <span class="op">=</span> br<span class="op">.</span><span class="fu">readLine</span><span class="op">())</span> <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span> <span class="op">{</span></span><span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>str<span class="op">);</span></span><span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>br<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h2 id="序列化流">序列化流</h2><ul><li>是字节流的一种</li><li>可以把Java中的对象写到本地文件中</li><li>是高级流</li></ul><h3 id="构造方法">构造方法</h3><ul><li><code>public ObjectOutputStream(OutputStream out)</code>：基本流包装成高级流</li><li><code>public final void writeObject(Object obj)</code>：把对象序列化写出</li></ul><h3 id="输出">输出</h3><div class="sourceCode" id="cb12"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>Student stu <span class="op">=</span> <span class="kw">new</span> <span class="fu">Student</span><span class="op">(</span><span class="st">"a"</span><span class="op">,</span> <span class="dv">18</span><span class="op">);</span></span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="bu">ObjectOutputStream</span> oos <span class="op">=</span> <span class="kw">new</span> <span class="bu">ObjectOutputStream</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">));</span></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>oos<span class="op">.</span><span class="fu">writeObject</span><span class="op">(</span>stu<span class="op">);</span></span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>oos<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><p><strong>注意</strong>：要序列化的Javabean类需要实现Serializable接口，Serializable接口是个标记接口</p><h3 id="输入">输入</h3><div class="sourceCode" id="cb13"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="bu">ObjectInputStream</span> ois <span class="op">=</span> <span class="kw">new</span> <span class="bu">ObjectInputStream</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">));</span></span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="co">//Object o = ois.readObject();</span></span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>Student o <span class="op">=(</span>Student<span class="op">)</span> ois<span class="op">.</span><span class="fu">readObject</span><span class="op">();</span></span><span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>o<span class="op">);</span></span><span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>ois<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h3 id="版本号">版本号</h3><ul><li><p>当一个对象实现了Serializable接口之后，每一次修改这个Javabean类都会生成新的版本号，而每次序列化会把版本号序列化进去，使得在反序列化时可能会出现序列化的对象和当前Javabean类版本号不一致的问题</p></li><li><p>可以固定版本号</p><div class="sourceCode" id="cb14"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> Student <span class="kw">implements</span> <span class="bu">Serializable</span> <span class="op">{</span></span><span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="dt">static</span> <span class="dt">final</span> <span class="dt">long</span> serialVersionUID <span class="op">=</span> <span class="dv">1L</span><span class="op">;</span><span class="co">// 唯一格式 建议自动生成</span></span><span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li></ul><h4 id="transient关键字">transient关键字</h4><ul><li>瞬态关键字</li><li>被此关键字修饰的变量不会被序列化到本地文件中</li></ul><div class="sourceCode" id="cb15"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">transient</span> <span class="bu">String</span> address<span class="op">;</span></span></code></pre></div><h2 id="打印流">打印流</h2><ul><li><p>只有输出流</p></li><li><p>字节打印流 和 字符打印流</p></li><li><p>不能操作数据源，只能操作目的地</p></li><li><p>PrintStream</p></li><li><p>PrintWriter</p></li></ul><h3 id="字节打印流">字节打印流</h3><p>字节流底层没缓冲区，自动刷新开不开没区别</p><h4 id="构造">构造</h4><ul><li><code>public PrintStream(OutputStream/File/String)</code>：关联字节输出流/文件/文件路径</li><li><code>public PrintStream(String fileName, Charset charset)</code>：指定字符编码</li><li><code>public PrintStream(OutputStream out, boolean autoFlush)</code>：自动刷新</li><li><code>public PrintStream(OutputStream out, boolean autoFlush, String encoding)</code>：指定字符编码</li></ul><h4 id="方法">方法</h4><ul><li><code>public void write(int b)</code>：常规方法，和之前一样</li><li><code>public void println(Xxx xx)</code>：特有方法，打印任意数据，自动刷新、换行</li><li><code>public void print(Xxx xx)</code>：特有方法，打印任意数据，不换行</li><li><code>public void printf(String format, Object...)</code>：特有方法，带有占位符的打印语句，不换行</li></ul><div class="sourceCode" id="cb16"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="bu">PrintStream</span> ps <span class="op">=</span> <span class="kw">new</span> <span class="bu">PrintStream</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">),</span> <span class="kw">true</span><span class="op">,</span> <span class="bu">Charset</span><span class="op">.</span><span class="fu">forName</span><span class="op">(</span><span class="st">"GBK"</span><span class="op">));</span></span><span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>ps<span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="dv">97</span><span class="op">);</span><span class="co">//写出 + 自动刷新 + 自动换行</span></span><span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>ps<span class="op">.</span><span class="fu">print</span><span class="op">(</span><span class="kw">true</span><span class="op">);</span></span><span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>ps<span class="op">.</span><span class="fu">println</span><span class="op">();</span></span><span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>ps<span class="op">.</span><span class="fu">printf</span><span class="op">(</span><span class="st">"</span><span class="sc">%s</span><span class="st"> loves </span><span class="sc">%s</span><span class="st">"</span><span class="op">,</span> <span class="st">"a"</span><span class="op">,</span> <span class="st">"b"</span><span class="op">);</span></span><span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>ps<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h3 id="字符打印流">字符打印流</h3><p>字符流底层有缓冲区，要自动刷新需要手动开启</p><h4 id="构造-1">构造</h4><ul><li><code>public PrintWriter(Writer/File/String)</code>：关联字节输出流/文件/路径</li><li><code>public PrintWriter(String fileName, Charset charset)</code>：指定字符编码</li><li><code>public PrintWriter(Write w, boolean autoFlush)</code>：自动刷新</li><li><code>public PrintWriter(OutputStream out, boolean autoFlush, Charset charset)</code>：指定字符编码且自动刷新</li></ul><h4 id="方法-1">方法</h4><p>和字节打印流一样</p><div class="sourceCode" id="cb17"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="bu">PrintWriter</span> pw <span class="op">=</span> <span class="kw">new</span> <span class="bu">PrintWriter</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileWriter</span><span class="op">(</span><span class="st">""</span><span class="op">),</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>pw<span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="st">"abc"</span><span class="op">);</span></span><span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>pw<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h4 id="用处">用处</h4><ul><li><code>System.out</code>是一个静态打印流对象，虚拟机启动的时候，由JVM赋值，默认指向控制台</li></ul><h2 id="压缩流">压缩流</h2><ul><li>只能识别.zip文件</li><li>压缩包里每一个文件在Java中是一个ZipEntry对象</li><li>解压本质：把每一个ZipEntry对象按照层级拷贝到本地另一个文件夹中</li></ul><h3 id="解压缩流">解压缩流</h3><p>ZipInputStream</p><hr><p>未完待续</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="IO流" scheme="https://ethanh3514.github.io/tags/IO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Java File 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/15/Java-File-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/15/Java-File-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-15T13:33:16.000Z</published>
    <updated>2024-03-15T14:08:22.485Z</updated>
    
    <content type="html"><![CDATA[<p>貌似没多少东西</p><span id="more"></span><h3 id="file的构造">File的构造</h3><ul><li><code>public File(String pathname)</code>：把字符串表示的路径变成File对象</li><li><code>public File(String parent, String child)</code>：把父级路径和子级路径进行拼接</li><li><code>public File(File parent, String child)</code></li></ul><p>因为Windows和Linux的路径连接符不一样，所以还是用现有的方法会更好一点</p><h3 id="file的成员方法">File的成员方法</h3><ul><li><code>public boolean isDirectory()</code>：判断是否为文件夹</li><li><code>public boolean isFile()</code>：判断是否为文件</li><li><code>public boolean exists()</code>：判断是否存在</li><li><code>public long length()</code>：返回文件的大小（字节数），无法获取文件夹大小</li><li><code>public String getAbsolutePath()</code>：返回文件的绝对路径</li><li><code>public String getPath()</code>：返回定义文件时的路径</li><li><code>public String getName()</code>：返回文件的名称，带后缀</li><li><code>public long lastModified()</code>：返回文件最后修改时间（毫秒值）</li><li><code>public boolean createNewFile()</code>：创建一个新的空文件，需要父级路径存在</li><li><code>public boolean mkdir()</code>：创建单级文件夹</li><li><code>public boolean mkdirs()</code>：创建多级文件夹</li><li><code>public boolean delete()</code>：删除文件、空文件夹</li><li><code>public File[] listFiles()</code>：获取当前路径下所有内容<ul><li>当调用者File表示的路径不存在、是文件时，返回null</li><li>若无访问文件夹的权限，返回null</li></ul></li><li><code>public static File[] listRoots()</code>：列出可用的文件系统根</li><li><code>public String[] list()</code>：获取当前路径下所有内容</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;貌似没多少东西&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="File" scheme="https://ethanh3514.github.io/tags/File/"/>
    
  </entry>
  
  <entry>
    <title>Java 异常 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/14/Java-%E5%BC%82%E5%B8%B8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/14/Java-%E5%BC%82%E5%B8%B8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-14T13:59:58.000Z</published>
    <updated>2024-03-15T15:19:29.529Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><h2 id="异常">异常</h2><ul><li>最上层父类：<code>Exception</code></li><li>分为：编译时异常、运行时异常<ul><li>编译时异常：直接继承于<code>Exception</code>，编译阶段就会错误提示（java文件-&gt; 字节码文件）</li><li>运行时异常：<code>RuntimeException</code>本身和子类，运行时出错误提示（字节码文件-&gt; 运行结果)</li></ul></li></ul><h2 id="异常的处理方式">异常的处理方式</h2><h3 id="jvm默认处理方式">JVM默认处理方式</h3><ul><li>把异常名字、异常原因、异常出现位置以红色字体输出在控制台</li><li>程序中止</li></ul><h3 id="自己处理">自己处理</h3><ul><li>可以让程序继续执行</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span><span class="op">[]</span> arr <span class="op">=</span> <span class="op">{</span><span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">};</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="cf">try</span> <span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>arr<span class="op">[</span><span class="dv">5</span><span class="op">]);</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">catch</span><span class="op">(</span><span class="bu">ArrayIndexOutOfBoundsException</span> e<span class="op">)</span> <span class="op">{</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="st">"索引越界"</span><span class="op">);</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="st">"Hello"</span><span class="op">);</span><span class="co">//执行成功</span></span></code></pre></div><ul><li><code>try</code>中代码出现异常就中止，进入对应的catch</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span><span class="op">[]</span> arr <span class="op">=</span> <span class="op">{</span><span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">};</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="cf">try</span> <span class="op">{</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>arr<span class="op">[</span><span class="dv">10</span><span class="op">]);</span><span class="co">//ArrayIndexOutOfBoundsException</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="dv">2</span><span class="op">/</span><span class="dv">0</span><span class="op">);</span><span class="co">//ArithmeticException</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">catch</span><span class="op">(</span><span class="bu">ArrayIndexOutOfBoundsException</span> e<span class="op">)</span> <span class="op">{</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="st">"索引越界"</span><span class="op">);</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="st">"Hello"</span><span class="op">);</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="co">//输出：</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="co">//索引越界</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="co">//Hello</span></span></code></pre></div><ul><li><p>若<code>try</code>中可能遇到多个异常，写多个<code>catch</code>与之对应。</p><ul><li><strong>注意</strong>：如果这些异常中存在父子关系，父类写下面</li><li>多个<code>catch</code>也不能同时捕获多个异常，碰到第一个异常就退出了</li></ul></li><li><p><strong>JDK7</strong>之后，可以在catch中捕获多个种类的异常</p><ul><li>表示出现了A异常或B异常，采用同一种方案</li></ul><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="cf">try</span> <span class="op">{</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">catch</span><span class="op">(</span><span class="bu">ArrayIndexOutOfBoundsException</span> <span class="op">|</span> <span class="bu">ArithmeticException</span> e<span class="op">)</span> <span class="op">{</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li><li><p><code>try</code>中遇到的异常没被捕获，采用JVM默认方法处理</p></li></ul><h4 id="异常的常见方法">异常的常见方法</h4><h5 id="throwable的成员方法">Throwable的成员方法</h5><ul><li><code>public void printStackTrace()</code>：把异常信息输出在控制台，不会停止程序运行</li><li><code>public String toString()</code>：返回这个可抛出的简短描述</li><li><code>public String getMessage()</code>：返回此<code>throwable</code>的详细消息字符串</li></ul><h3 id="抛出异常">抛出异常</h3><ul><li><code>throws</code>：标记在方法定义处<ul><li>编译时异常：必须写</li><li>运行时异常：可以不写</li></ul></li></ul><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="dt">void</span> <span class="fu">method</span><span class="op">()</span> <span class="kw">throws</span> 异常<span class="er">1</span><span class="op">,</span> 异常<span class="fl">2.</span><span class="op">..</span> <span class="op">{</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">...</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><ul><li><code>throw</code>：手动抛出异常对象，抛出后中止</li></ul><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="dt">static</span> <span class="dt">int</span> <span class="fu">getMax</span><span class="op">(</span><span class="dt">int</span><span class="op">[]</span> arr<span class="op">)</span> <span class="op">{</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>arr <span class="op">==</span> <span class="kw">null</span><span class="op">)</span> <span class="op">{</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">NullPointerException</span><span class="op">();</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>arr<span class="op">.</span><span class="fu">length</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">ArrayIndexOutOfBoundsException</span><span class="op">();</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">...</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h2 id="自定义异常">自定义异常</h2><p>主要是写自定义的名字</p><ul><li>定义异常类</li><li>继承</li><li>写空参和带参构造</li></ul><div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> NameFormatException <span class="kw">extends</span> <span class="bu">RuntimeException</span> <span class="op">{</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="fu">NameFormatException</span><span class="op">()</span> <span class="op">{</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="fu">NameFormatException</span><span class="op">(</span><span class="bu">String</span> message<span class="op">)</span> <span class="op">{</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">super</span><span class="op">(</span>message<span class="op">);</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h3 id="try-catch-finally">try catch finally</h3><h4 id="jdk7io流中捕获异常的写法">JDK7：IO流中捕获异常的写法</h4><p>只有实现了<code>AutoCloseable</code>接口的类才能在小括号中创建对象</p><div class="sourceCode" id="cb7"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span><span class="op">(</span><span class="bu">String</span><span class="op">[]</span> args<span class="op">)</span> <span class="op">{</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span><span class="op">(</span><span class="bu">FileInputStream</span> fis <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>       <span class="bu">FileOutputStream</span> fos <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">))</span> <span class="op">{</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">catch</span><span class="op">(</span><span class="bu">IOException</span> e<span class="op">)</span> <span class="op">{</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        e<span class="op">.</span><span class="fu">printStackTrace</span><span class="op">();</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><p>资源自动释放</p><h4 id="jdk9">JDK9</h4><div class="sourceCode" id="cb8"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span><span class="op">(</span><span class="bu">String</span><span class="op">[]</span> args<span class="op">)</span> <span class="kw">throws</span> <span class="bu">FileNotFoundException</span> <span class="op">{</span><span class="co">//因为对象创建在外面，所以需要抛出异常</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">FileInputStream</span> fis <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">FileOutputStream</span> fos <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span><span class="op">(</span>fis<span class="op">;</span>fos<span class="op">)</span> <span class="op">{</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">catch</span><span class="op">(</span><span class="bu">IOException</span> e<span class="op">)</span> <span class="op">{</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>        e<span class="op">.</span><span class="fu">printStackTrace</span><span class="op">();</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="异常" scheme="https://ethanh3514.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Java 方法引用 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/14/Java-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/14/Java-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-14T09:42:35.000Z</published>
    <updated>2024-03-14T14:00:45.096Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><ul><li>方法引用就是把已经有的方法拿过来用，当做函数式接口中抽象方法的方法体</li><li><code>::</code>是方法引用符</li></ul><h4 id="要求">要求</h4><ul><li>需要有函数式接口</li><li>被引用的方法必须已经存在</li><li>被引用方法的形参和返回值需要和抽象方法保持一致</li><li>被引用方法的功能要满足当前需求</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">Arrays</span><span class="op">;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> FunctionDemo <span class="op">{</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span><span class="op">(</span><span class="bu">String</span><span class="op">[]</span> args<span class="op">)</span> <span class="op">{</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">Integer</span><span class="op">[]</span> list <span class="op">=</span> <span class="op">{</span><span class="dv">3</span><span class="op">,</span> <span class="dv">5</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">4</span><span class="op">};</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">Arrays</span><span class="op">.</span><span class="fu">sort</span><span class="op">(</span>list<span class="op">,</span> FunctionDemo<span class="op">::</span>subtraction<span class="op">);</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="bu">Arrays</span><span class="op">.</span><span class="fu">toString</span><span class="op">(</span>list<span class="op">));</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">int</span> <span class="fu">subtraction</span><span class="op">(</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> b <span class="op">-</span> a<span class="op">;</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h3 id="各种方法的引用格式">各种方法的引用格式</h3><h4 id="引用静态方法">引用静态方法</h4><ul><li><strong>格式</strong>：<code>类名::静态方法</code></li><li><code>Integer::parseInt</code></li></ul><h4 id="引用成员方法">引用成员方法</h4><ul><li><strong>格式</strong>：<code>对象::成员方法</code></li><li>其他类：其他类对象::方法名</li><li>本类：<code>this::方法名</code>（引用处不能是静态方法，静态方法中无this）</li><li>父类：<code>super::方法名</code>（引用处不能是静态方法，静态方法中无super）</li></ul><h4 id="引用构造方法">引用构造方法</h4><ul><li>格式：<code>类名::new</code></li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">//psvm</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">ArrayList</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> list <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="bu">Collections</span><span class="op">.</span><span class="fu">addAll</span><span class="op">(</span>list<span class="op">,</span> <span class="st">"aaa"</span><span class="op">,</span> <span class="st">"bbb"</span><span class="op">,</span> <span class="st">"ccc"</span><span class="op">);</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>list<span class="op">.</span><span class="fu">stream</span><span class="op">().</span><span class="fu">map</span><span class="op">(</span>Student<span class="op">::</span><span class="kw">new</span><span class="op">);</span><span class="co">//这样会调用Student中和stream流里数据类型一致的构造方法</span></span></code></pre></div><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">//Student中添加对应的构造方法</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="fu">Student</span><span class="op">(</span><span class="bu">String</span> str<span class="op">)</span> <span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h4 id="使用类名引用成员方法">使用类名引用成员方法</h4><ul><li><p>格式：<code>类名::成员方法</code></p></li><li><p>第一个参数：表示被引用方法的调用者，决定了可以引用哪些类中的方法</p><ul><li>在Stream流里面，第一个参数一般都表示流里面的每一个数据，假设流里面的数据是字符串，那么使用这种方法进行方法引用，只能引用String这个类中的方法</li><li>第二个参数到最后一个参数：跟被引用方法的形参保持一致，如果没有第二个参数，说明被引用的方法需要是无参的成员方法</li></ul><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="bu">ArrayList</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> list <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="bu">Collections</span><span class="op">.</span><span class="fu">addAll</span><span class="op">(</span>list<span class="op">,</span> <span class="st">"aaa"</span><span class="op">,</span> <span class="st">"bbb"</span><span class="op">,</span> <span class="st">"ccc"</span><span class="op">);</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co">//拿着流里面的每一个数据，去调用String类中的toUpperCase方法，方法的返回值就是转换之后的结果</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>list<span class="op">.</span><span class="fu">stream</span><span class="op">().</span><span class="fu">map</span><span class="op">(</span><span class="bu">String</span><span class="op">::</span>toUpperCase<span class="op">).</span><span class="fu">forEach</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">));</span></span></code></pre></div></li><li><p><strong>局限性</strong>：</p><ul><li>不能引用所有类中的成员方法</li><li>与抽象方法的第一个参数有关，这个参数是什么类型的，那么就只能引用这个类中的方法</li></ul></li><li><p>在Stream流当中，第一个参数一般都表示流里面的每一个数据。</p></li></ul><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>list<span class="op">.</span><span class="fu">stream</span><span class="op">().</span><span class="fu">filter</span><span class="op">(</span><span class="kw">new</span> <span class="fu">StringOperation</span><span class="op">()::</span>stringJudge<span class="op">).</span><span class="fu">forEach</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">));</span></span></code></pre></div><h4 id="引用数组的构造方法">引用数组的构造方法</h4><ul><li>格式：<code>数据类型[]::new</code></li><li>数组的类型需要和流中数据类型保持一致</li></ul><div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">ArrayList</span><span class="op">;</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">Arrays</span><span class="op">;</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">Collections</span><span class="op">;</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> FunctionDemo1 <span class="op">{</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span><span class="op">(</span><span class="bu">String</span><span class="op">[]</span> args<span class="op">)</span> <span class="op">{</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">ArrayList</span><span class="op">&lt;</span><span class="bu">Integer</span><span class="op">&gt;</span> list <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        <span class="bu">Collections</span><span class="op">.</span><span class="fu">addAll</span><span class="op">(</span>list<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>        <span class="bu">Integer</span><span class="op">[]</span> arr <span class="op">=</span> list<span class="op">.</span><span class="fu">stream</span><span class="op">().</span><span class="fu">toArray</span><span class="op">(</span><span class="bu">Integer</span><span class="op">[]::</span><span class="kw">new</span><span class="op">);</span></span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="bu">Arrays</span><span class="op">.</span><span class="fu">toString</span><span class="op">(</span>arr<span class="op">));</span></span><span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="方法引用" scheme="https://ethanh3514.github.io/tags/%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
</feed>
