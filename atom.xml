<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hxy(慌糖盐)</title>
  
  
  <link href="https://ethanh3514.github.io/atom.xml" rel="self"/>
  
  <link href="https://ethanh3514.github.io/"/>
  <updated>2024-03-20T15:49:17.095Z</updated>
  <id>https://ethanh3514.github.io/</id>
  
  <author>
    <name>EthanH3514</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JDK和JRE</title>
    <link href="https://ethanh3514.github.io/2024/03/20/JDK%E5%92%8CJRE/"/>
    <id>https://ethanh3514.github.io/2024/03/20/JDK%E5%92%8CJRE/</id>
    <published>2024-03-20T15:45:04.000Z</published>
    <updated>2024-03-20T15:49:17.095Z</updated>
    
    <content type="html"><![CDATA[<p>owo</p><span id="more"></span><h3 id="jdkjava-development-kit">JDK（Java Development kit）</h3><ul><li>Java开发工具包</li></ul><h4 id="包含">包含</h4><ul><li>JVM（Java Virtual Machine）：Java虚拟机</li><li>核心类库</li><li>开发工具<ul><li>javac 编译工具</li><li>java 运行工具</li><li>jdb 调试工具</li><li>jhat 内存分析工具</li></ul></li></ul><h3 id="jrejava-runtime-environment">JRE（Java RuntimeEnvironment）</h3><ul><li>Java运行环境</li></ul><h4 id="包含-1">包含</h4><ul><li>JVM</li><li>核心类库</li><li>运行工具</li></ul><p>JDK包含JRE包含JVM</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;owo&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="JDK" scheme="https://ethanh3514.github.io/tags/JDK/"/>
    
    <category term="JRE" scheme="https://ethanh3514.github.io/tags/JRE/"/>
    
  </entry>
  
  <entry>
    <title>Java 动态代理 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/20/Java-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/20/Java-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-20T15:20:16.000Z</published>
    <updated>2024-03-20T15:38:48.062Z</updated>
    
    <content type="html"><![CDATA[<p>可以无侵入式的给代码增加额外的功能</p><span id="more"></span><p>对象可以通过代理来转移部分职责</p><ul><li>调用过程：调用者 -&gt; 代理 -&gt; 对象</li><li>代理里面就是对象要被代理的方法</li><li>Java通过接口保证代理的样子，对象和代理需要实现同一个接口，接口中是被代理的所有方法</li></ul><h3 id="创建代理对象">创建代理对象</h3><ul><li><code>java.lang.reflect.Proxy</code>类：提供了为对象产生代理对象的方法</li><li><code>public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</code><ul><li>参数一：指定类加载器，加载生成的代理类</li><li>参数二：指定接口，这些接口用于指定代理有哪些方法</li><li>参数三：指定生成的代理对象要干什么</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;可以无侵入式的给代码增加额外的功能&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="动态代理" scheme="https://ethanh3514.github.io/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java 反射 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/20/Java-%E5%8F%8D%E5%B0%84-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/20/Java-%E5%8F%8D%E5%B0%84-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-20T14:16:38.000Z</published>
    <updated>2024-03-20T15:18:14.162Z</updated>
    
    <content type="html"><![CDATA[<p>反射允许对成员变量、成员方法和构造方法的信息进行编程访问</p><span id="more"></span><p>反射可以获取类中所有信息</p><p>获取 -&gt; 解剖</p><p>获取是从class文件中获取</p><h3 id="获取class对象">获取class对象</h3><ul><li><code>Class.forName("全类名")</code> 全类名：包名+类名</li><li><code>类名.class</code></li><li><code>对象.getClass()</code></li></ul><h4 id="什么时候使用哪种">什么时候使用哪种</h4><ul><li><strong>源代码阶段</strong>：java文件 -&gt;class文件，只在硬盘内操作。使用第一种</li><li><strong>加载阶段</strong>：class文件进入内存。使用第二种</li><li><strong>运行阶段</strong>：创建了类的对象。使用第三种</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">//最为常用的方式</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="bu">Class</span> clazz <span class="op">=</span> <span class="bu">Class</span><span class="op">.</span><span class="fu">forName</span><span class="op">(</span><span class="st">"package1.Student"</span><span class="op">);</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co">//更多的是当做参数进行传递</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="bu">Class</span> clazz2 <span class="op">=</span> Student<span class="op">.</span><span class="fu">class</span><span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">//当已经有了这个类的对象时才可以使用</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>Student s <span class="op">=</span> <span class="kw">new</span> <span class="fu">Student</span><span class="op">();</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="bu">Class</span> clazz3 <span class="op">=</span> s<span class="op">.</span><span class="fu">getClass</span><span class="op">();</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>clazz1 <span class="op">==</span> clazz2<span class="op">);</span><span class="co">//true</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>clazz2 <span class="op">==</span> clazz3<span class="op">);</span><span class="co">//true</span></span></code></pre></div><h3 id="java中万物皆对象">Java中万物皆对象</h3><ul><li>class文件可以看作Class类的对象</li><li>构造方法可以看作Constructor类的对象</li><li>成员变量可以看作Field的对象</li><li>成员方法可以看作Method的对象</li></ul><h4 id="获取构造方法">获取构造方法</h4><ul><li><code>Constructor&lt;?&gt;[] getConstructors()</code>：返回所有<code>public</code>构造方法对象的数组</li><li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code>：返回所有构造方法对象的数组</li><li><code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code>：返回单个<code>public</code>构造方法对象</li><li><code>Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)</code>：返回单个构造方法对象</li></ul><p>Constructor类中用于创建对象的方法</p><ul><li><code>T newInstance(Object... initargs)</code>：根据指定的构造方法创建对象</li><li><code>setAccessible(boolean flag)</code>：设置为true，表示取消访问检查</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">Class</span> clazz <span class="op">=</span> <span class="bu">Class</span><span class="op">.</span><span class="fu">forName</span><span class="op">(</span><span class="st">"package1.Student"</span><span class="op">);</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="bu">Constructor</span><span class="op">[]</span> cons <span class="op">=</span> clazz<span class="op">.</span><span class="fu">getConstructors</span><span class="op">();</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">//获取单个构造方法的参数传入要获取的构造方法参数的字节码文件</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="bu">Constructor</span> con1 <span class="op">=</span> clazz<span class="op">.</span><span class="fu">getDeclaredConstructor</span><span class="op">(</span><span class="bu">String</span><span class="op">.</span><span class="fu">class</span><span class="op">);</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co">//获取参数列表</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="bu">Parameter</span><span class="op">[]</span> parameters <span class="op">=</span> con1<span class="op">.</span><span class="fu">getParameters</span><span class="op">();</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(</span><span class="bu">Parameter</span> parameter <span class="op">:</span> parameters<span class="op">)</span> <span class="op">{</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>parameter<span class="op">);</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="co">//创建对象</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="co">//无法直接利用非public的方法</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="co">//暴力反射：临时取消权限校验</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>con1<span class="op">.</span><span class="fu">setAccessible</span><span class="op">(</span><span class="kw">true</span><span class="op">);</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>Student s1 <span class="op">=</span> <span class="op">(</span>Student<span class="op">)</span>con1<span class="op">.</span><span class="fu">newInstance</span><span class="op">(</span><span class="st">"Lin"</span><span class="op">);</span></span></code></pre></div><h4 id="获取成员变量">获取成员变量</h4><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">//获取class字节码文件对象</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">Class</span> clazz <span class="op">=</span> <span class="bu">Class</span><span class="op">.</span><span class="fu">forName</span><span class="op">(</span><span class="st">"package1.Student"</span><span class="op">);</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">//获取成员变量</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>Filed<span class="op">[]</span> fileds <span class="op">=</span> clazz<span class="op">.</span><span class="fu">getDeclaredFields</span><span class="op">();</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(</span>Filed filed <span class="op">:</span> fileds<span class="op">)</span> <span class="op">{</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>filed<span class="op">);</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="co">//获取单个成员变量</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="bu">Field</span> gender <span class="op">=</span> clazz<span class="op">.</span><span class="fu">getFiled</span><span class="op">(</span><span class="st">"gender"</span><span class="op">);</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>gender<span class="op">);</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="co">//获取权限修饰符</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> modifiers <span class="op">=</span> gender<span class="op">.</span><span class="fu">getModifiers</span><span class="op">();</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>modifiers<span class="op">);</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="co">//获取成员变量的名字</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> n <span class="op">=</span> gender<span class="op">.</span><span class="fu">getName</span><span class="op">();</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>n<span class="op">);</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="co">//获取成员变量的数据类型</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="bu">Class</span><span class="op">&lt;?&gt;</span> type <span class="op">=</span> gender<span class="op">.</span><span class="fu">getType</span><span class="op">();</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>type<span class="op">);</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="co">//获取成员变量记录的值</span></span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>Student s <span class="op">=</span> <span class="kw">new</span> <span class="fu">Student</span><span class="op">(</span><span class="st">"zhangsan"</span><span class="op">,</span> <span class="dv">23</span><span class="op">,</span> <span class="st">"boy"</span><span class="op">);</span></span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>name<span class="op">.</span><span class="fu">setAccessible</span><span class="op">(</span><span class="kw">true</span><span class="op">);</span></span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> value <span class="op">=</span> <span class="op">(</span><span class="bu">String</span><span class="op">)</span>gender<span class="op">.</span><span class="fu">get</span><span class="op">(</span>s<span class="op">);</span></span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>value<span class="op">);</span></span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a><span class="co">//修改对象里面记录的值</span></span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>gender<span class="op">.</span><span class="fu">set</span><span class="op">(</span>s<span class="op">,</span> <span class="st">"girl"</span><span class="op">);</span></span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">);</span></span></code></pre></div><h4 id="获取成员方法">获取成员方法</h4><ul><li><code>Method[] getMethods()</code></li><li><code>Method[] getDeclaredMethods()</code></li></ul><p>类似</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;反射允许对成员变量、成员方法和构造方法的信息进行编程访问&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="反射" scheme="https://ethanh3514.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Java 网络编程 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/20/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/20/Java-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-20T12:15:30.000Z</published>
    <updated>2024-03-20T14:15:33.303Z</updated>
    
    <content type="html"><![CDATA[<p>owo</p><span id="more"></span><h3 id="csbs">CS/BS</h3><ul><li>常见软件架构</li></ul><h4 id="cs">C/S</h4><ul><li>Client/Server</li></ul><h4 id="bs">B/S</h4><ul><li>Browser/Server</li></ul><h3 id="网络编程三要素">网络编程三要素</h3><ul><li><p>IP</p></li><li><p>端口号</p></li><li><p>协议</p></li></ul><h2 id="java.net包">java.net包</h2><p>表示IP地址</p><h3 id="inetaddress类">InetAddress类</h3><h4 id="方法">方法</h4><ul><li><code>static InetAddress getByName(String host)</code>：确定主机的IP。主机名可以是机器名，也可以是IP</li><li><code>String getHostName()</code>：获取此IP的主机名</li><li><code>String getHostAddress()</code>：返回文本显示中的IP地址字符串</li></ul><h3 id="协议">协议</h3><h4 id="udp">UDP</h4><ul><li>面向无连接</li><li>用户数据包协议（User Datagram Protocol）</li><li>速度快、一次最多发64K，易丢失</li></ul><h5 id="发送数据">发送数据</h5><ul><li>创建发送端的DatagramSocket</li><li>数据打包</li><li>发送数据</li><li>释放资源</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">//创建对象时底层绑定端口，作为发出的端口</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">//空参：所有可用端口中随机一个使用</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">//有参：指定端口</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="bu">DatagramSocket</span> ds <span class="op">=</span> <span class="kw">new</span> <span class="bu">DatagramSocket</span><span class="op">();</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">//打包数据</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> str <span class="op">=</span> <span class="st">"Hello"</span><span class="op">;</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="dt">byte</span><span class="op">[]</span> bytes <span class="op">=</span> str<span class="op">.</span><span class="fu">getBytes</span><span class="op">();</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="bu">InetAddress</span> address <span class="op">=</span> <span class="bu">InetAddress</span><span class="op">.</span><span class="fu">getByName</span><span class="op">(</span><span class="st">"127.0.0.1"</span><span class="op">);</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> port <span class="op">=</span> <span class="dv">10086</span><span class="op">;</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="bu">DatagramPacket</span> dp <span class="op">=</span> <span class="kw">new</span> <span class="bu">DatagramPacket</span><span class="op">(</span>bytes<span class="op">,</span> bytes<span class="op">.</span><span class="fu">length</span><span class="op">,</span> address<span class="op">,</span> port<span class="op">);</span><span class="co">//发到 port 这个端口</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="co">//发送数据</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>ds<span class="op">.</span><span class="fu">send</span><span class="op">(</span>dp<span class="op">);</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="co">//释放资源</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>ds<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h5 id="接收数据">接收数据</h5><ul><li>创建接收端的DatagramSocket对象</li><li>接收打包好的数据</li><li>解析数据包</li><li>释放资源</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">//接收的时候一定要绑定端口</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">DatagramSocket</span> ds <span class="op">=</span> <span class="kw">new</span> <span class="bu">DatagramSocket</span><span class="op">(</span><span class="dv">10086</span><span class="op">);</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">//接收数据包</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="dt">byte</span><span class="op">[]</span> bytes <span class="op">=</span> <span class="kw">new</span> <span class="dt">byte</span><span class="op">[</span><span class="dv">1024</span><span class="op">];</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="bu">DatagramPacket</span> dp <span class="op">=</span> <span class="kw">new</span> <span class="bu">DatagramPacket</span><span class="op">(</span>bytes<span class="op">,</span> bytes<span class="op">.</span><span class="fu">length</span><span class="op">);</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co">//这个方法是阻塞的</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="co">//执行到这一步会死等</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>ds<span class="op">.</span><span class="fu">receive</span><span class="op">(</span>dp<span class="op">);</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="co">//解析数据包</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="dt">byte</span><span class="op">[]</span> data <span class="op">=</span> dp<span class="op">.</span><span class="fu">getData</span><span class="op">();</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> len <span class="op">=</span> dp<span class="op">.</span><span class="fu">getLength</span><span class="op">();</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="bu">InetAddress</span> address <span class="op">=</span> dp<span class="op">.</span><span class="fu">getAddress</span><span class="op">();</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> port <span class="op">=</span> dp<span class="op">.</span><span class="fu">getPort</span><span class="op">();</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="kw">new</span> <span class="bu">String</span><span class="op">(</span>data<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> len<span class="op">));</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>address <span class="op">+</span> <span class="st">" "</span> <span class="op">+</span> port<span class="op">);</span></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="co">//释放资源</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>ds<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h5 id="三种通信方式">三种通信方式</h5><ul><li>单播</li><li>组播</li><li>广播</li></ul><h4 id="tcp">TCP</h4><ul><li>面向连接</li><li>传输控制协议（Transmission Control Protocol）</li><li>速度慢、没大小限制，数据安全</li><li>通过Socket产生IO流进行网络通信</li></ul><h5 id="客户端">客户端</h5><ul><li>创建客户端的Socket对象（<code>Socket</code>），与指定服务端连接</li><li>获取输出流，写数据</li><li>释放资源</li></ul><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">//在创建对象的同时会连接服务器</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">//连接不上会报错</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="bu">Socket</span> socket <span class="op">=</span> <span class="kw">new</span> <span class="bu">Socket</span><span class="op">(</span><span class="st">"127.0.0.1"</span><span class="op">,</span> <span class="dv">10000</span><span class="op">);</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="co">//可以从连接通道中获取输出流</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="bu">OutputStream</span> os <span class="op">=</span> socket<span class="op">.</span><span class="fu">getOutputStream</span><span class="op">();</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="co">//写数据</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>os<span class="op">.</span><span class="fu">write</span><span class="op">(</span><span class="st">"Hello"</span><span class="op">.</span><span class="fu">getBytes</span><span class="op">());</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="co">//释放资源</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>os<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>socket<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h5 id="服务器">服务器</h5><ul><li>创建服务器端的Socket对象（<code>ServerSocket</code>）</li><li>监听客户端连接，返回一个Socket对象</li><li>获取输入流，读数据，并把数据显示在控制台</li><li>释放资源</li></ul><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="bu">ServerSocket</span> ss <span class="op">=</span> <span class="kw">new</span> <span class="bu">ServerSocket</span><span class="op">(</span><span class="dv">10000</span><span class="op">);</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co">//如果没有连接就会死等</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="bu">Socket</span> socket <span class="op">=</span> ss<span class="op">.</span><span class="fu">accept</span><span class="op">();</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="bu">InputStream</span> is <span class="op">=</span> socket<span class="op">.</span><span class="fu">getInputStream</span><span class="op">();</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> b<span class="op">;</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>b <span class="op">=</span> is<span class="op">.</span><span class="fu">read</span><span class="op">())</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">((</span>cahr<span class="op">)</span>b<span class="op">);</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>socket<span class="op">.</span><span class="fu">close</span><span class="op">();</span><span class="co">//断开连接</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>ss<span class="op">.</span><span class="fu">close</span><span class="op">();</span><span class="co">//关闭服务器</span></span></code></pre></div><p><strong>注意</strong>：这里是字节流，会出现中文乱码。类比之前的字符流可以解决</p><h5 id="三次握手">三次握手</h5><ul><li>客户端向服务器发出连接请求，等待服务器确认</li><li>服务器向客户端返回一个响应，告诉客户端收到了请求</li><li>客户端向服务端再次发出确认，连接建立</li></ul><h5 id="四次挥手">四次挥手</h5><ul><li>客户端向服务端发出取消连接请求</li><li>服务端向客户端返回一个请求，表示收到客户端取消请求</li><li>服务端将最后的数据处理完毕之后，再次向客户端发出确认取消信息</li><li>客户端再次发送确认消息，连接断开</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;owo&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="网络编程" scheme="https://ethanh3514.github.io/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/16/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/16/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-16T12:39:10.000Z</published>
    <updated>2024-03-19T15:14:28.066Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><ul><li>并发：在同一时刻，有多个指令在单个CPU上<strong>交替</strong>执行</li><li>并行：在同一时刻，有多个指令在多个CPU上<strong>同时</strong>执行</li></ul><h3 id="多线程的实现方式">多线程的实现方式</h3><h4 id="继承thread类">继承Thread类</h4><p>重写run方法</p><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">//MyThread.java</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> MyThread <span class="kw">extends</span> <span class="bu">Thread</span> <span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">@Override</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">run</span><span class="op">()</span> <span class="op">{</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co">//ThreadDemo.java</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>MyThread t <span class="op">=</span> <span class="kw">new</span> <span class="fu">MyThread</span><span class="op">();</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>t<span class="op">.</span><span class="fu">start</span><span class="op">();</span></span></code></pre></div><h4 id="实现runnable接口">实现Runnable接口</h4><p>重写run方法</p><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">//MyRun.java</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> MyRun <span class="kw">implements</span> <span class="bu">Runnable</span> <span class="op">{</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">@Override</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">run</span><span class="op">()</span> <span class="op">{</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="bu">Thread</span><span class="op">.</span><span class="fu">currentThread</span><span class="op">().</span><span class="fu">getName</span><span class="op">()</span> <span class="op">+</span> <span class="st">"Hello"</span><span class="op">);</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="co">//ThreadDemo.java</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>MyRun a <span class="op">=</span> <span class="kw">new</span> <span class="fu">MyRun</span><span class="op">();</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="bu">Thread</span> t1 <span class="op">=</span> <span class="kw">new</span> <span class="bu">Thread</span><span class="op">(</span>a<span class="op">);</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="bu">Thread</span> t2 <span class="op">=</span> <span class="kw">new</span> <span class="bu">Thread</span><span class="op">(</span>a<span class="op">);</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>t1<span class="op">.</span><span class="fu">start</span><span class="op">();</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>t2<span class="op">.</span><span class="fu">start</span><span class="op">();</span></span></code></pre></div><h4 id="利用callable接口和future接口">利用Callable接口和Future接口</h4><ul><li>可以获取到多线程运行的结果</li></ul><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">//MyCallable.java</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> MyCallable <span class="kw">implements</span> <span class="bu">Callable</span><span class="op">&lt;</span><span class="bu">Integer</span><span class="op">&gt;</span> <span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">@Override</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="bu">Integer</span> <span class="fu">call</span><span class="op">()</span> <span class="kw">throws</span> <span class="bu">Exception</span> <span class="op">{</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> sum <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">100</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>            sum <span class="op">+=</span> i<span class="op">;</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> sum<span class="op">;</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co">//ThreadDemo.java</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="co">//创建MyCallable对象，表示多线程要执行的任务</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>MyCallable mc <span class="op">=</span> <span class="kw">new</span> <span class="fu">MyCallable</span><span class="op">();</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="co">//创建FutureTask对象，管理多线程运行的结果</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="bu">FutureTask</span><span class="op">&lt;</span><span class="bu">Integer</span><span class="op">&gt;</span> ft <span class="op">=</span> <span class="kw">new</span> <span class="bu">FutureTask</span><span class="op">&lt;&gt;(</span>mc<span class="op">);</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="bu">Thread</span> t1 <span class="op">=</span> <span class="kw">new</span> <span class="bu">Thread</span><span class="op">(</span>ft<span class="op">);</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>t1<span class="op">.</span><span class="fu">start</span><span class="op">();</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="co">//获取多线程运行的结果</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="bu">Integer</span> result <span class="op">=</span> ft<span class="op">.</span><span class="fu">get</span><span class="op">();</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>result<span class="op">);</span></span></code></pre></div><h3 id="常见成员方法">常见成员方法</h3><ul><li><code>String getName()</code>：返回线程名字</li><li><code>void setName(String name)</code>：设置线程名字，默认名字：Thread-X（X从0开始）</li><li><code>static Thread currentThread()</code>：获取当前线程的对象</li><li><code>static void sleep(long time)</code>：让线程休眠指定毫秒时间</li><li><code>setPriority(int newPriority)</code>：设置线程优先级（1~10），默认是5。优先级越高，越容易抢到cpu</li><li><code>final int getPriority()</code>：获取优先级</li><li><code>final void setDaemon(boolean on)</code>：设置为守护线程</li><li><code>public static void yield()</code>：出让线程/礼让线程，出让当前cpu的执行权</li><li><code>public static void join()</code>：插入线程/插队线程</li></ul><h3 id="调度">调度</h3><p>java中用的是抢占式调度，线程优先级越高，越容易抢到cpu</p><h3 id="守护线程">守护线程</h3><p>当其他的非守护线程执行完毕后，守护线程会陆续结束</p><h3 id="同步代码块">同步代码块</h3><ul><li>把操作共享数据的代码锁起来</li><li>锁默认打开，进去一个线程就关闭</li><li>里面线程出来再打开</li></ul><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">synchronized</span><span class="op">(</span>锁<span class="op">)</span> <span class="op">{</span><span class="co">//锁对象是任意唯一对象，可以用当前类的字节码文件（MyThread.class）</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h3 id="同步方法">同步方法</h3><ul><li>把synchronized关键字加到方法上</li><li><code>修饰符 synchronized 返回值类型 方法名(){}</code></li><li>同步方法是锁住方法里面所有的代码</li><li>锁对象不能自己指定<ul><li>当前方法非静态：this</li><li>当前方法静态：当前类的字节码文件对象</li></ul></li></ul><h3 id="lock锁">Lock锁</h3><ul><li>JDK5以后有的</li><li>提供了获得锁和释放锁的方法<ul><li><code>void lock()</code>：获得锁</li><li><code>void unlock()</code>：释放锁</li></ul></li><li>Lock是接口不能直接实例化</li></ul><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="bu">Lock</span> lock <span class="op">=</span> <span class="kw">new</span> <span class="bu">ReentrantLock</span><span class="op">();</span></span></code></pre></div><h3 id="常见方法">常见方法</h3><p>用锁使用方法</p><ul><li><code>void wait()</code>：当前线程等待，直到被其他线程唤醒</li><li><code>void notify()</code>：随机唤醒单个线程</li><li><code>void notifyAll()</code>：唤醒所有线程</li></ul><h3 id="阻塞队列">阻塞队列</h3><ul><li>实现了<code>Iterable</code>、<code>Collection</code>、<code>Queue</code>、<code>BlockingQueue</code>这些接口</li><li>有<code>ArrayBlockingQueue</code>和<code>LinkedBlockingQueue</code>两种实现方式</li><li>不需要额外写锁</li></ul><h4 id="方法">方法</h4><ul><li><code>put</code>, ``</li></ul><h3 id="线程池">线程池</h3><h4 id="executors">Executors</h4><p>线程池的工具类通过调用方法返回不同类型的线程池对象</p><ul><li><code>public static ExecutorService newCachedThreadPool()</code>：创建一个上限为INT_MAX的线程池对象</li><li><code>public static ExecutorService newFixedThreadPool(int nThreads)</code>：创建有上限的线程池</li></ul><h4 id="成员方法">成员方法</h4><ul><li><code>submit()</code>：提交任务</li><li><code>shutdown()</code>：销毁线程池</li></ul><hr><p>未完待续</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="多线程" scheme="https://ethanh3514.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java IO流 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/15/Java-IO%E6%B5%81-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/15/Java-IO%E6%B5%81-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-15T14:09:13.000Z</published>
    <updated>2024-03-16T12:37:56.197Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><h3 id="io流分类">IO流分类</h3><h4 id="字节流">字节流</h4><ul><li>可以操作所有类型的文件</li><li>读取文件的时候不要有中文</li><li>每次只能操作一个字节（整数不能超过一个字节）</li></ul><h5 id="子类">子类</h5><ul><li>InputStream</li><li>OutputStream</li></ul><h4 id="字符流">字符流</h4><ul><li>只能操作纯文本文件</li></ul><h5 id="子类-1">子类</h5><ul><li>Reader</li><li>Writer</li></ul><h2 id="字节流-1">字节流</h2><h3 id="字节输出流">字节输出流</h3><ul><li><code>FileOutputStream(File filename, boolean append)</code></li><li><code>FileOutputStream(String filepath)</code></li></ul><h3 id="字节输入流">字节输入流</h3><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileInputStream</span> fis <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> b<span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>b <span class="op">=</span> fis<span class="op">.</span><span class="fu">read</span><span class="op">())</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">((</span><span class="dt">char</span><span class="op">)</span>b<span class="op">);</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>fis<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h3 id="文件拷贝">文件拷贝</h3><p>小文件</p><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileInputStream</span> fis <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">FileOutputStream</span> fos <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> b<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>b <span class="op">=</span> fis<span class="op">.</span><span class="fu">read</span><span class="op">())</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    fos<span class="op">.</span><span class="fu">write</span><span class="op">(</span>b<span class="op">);</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">//释放资源</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co">//先开的最后关闭</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>fos<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>fis<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><p>文件大的时候一次次read()太慢</p><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileInputStream</span> fis <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">FileOutputStream</span> fos <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">byte</span><span class="op">[]</span> buf <span class="op">=</span> <span class="kw">new</span> <span class="dt">byte</span><span class="op">[</span><span class="dv">1024</span> <span class="op">*</span> <span class="dv">1024</span> <span class="op">*</span> <span class="dv">5</span><span class="op">];</span><span class="co">//一般取1024的倍数</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>len <span class="op">=</span> fis<span class="op">.</span><span class="fu">read</span><span class="op">(</span>buf<span class="op">))</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    fos<span class="op">.</span><span class="fu">write</span><span class="op">(</span>buf<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> len<span class="op">);</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>fos<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>fis<span class="op">.</span><span class="fu">close</span><span class="op">();</span> </span></code></pre></div><h2 id="字符流-1">字符流</h2><ul><li>字符流 = 字节流 + 字符集</li></ul><h4 id="特点">特点</h4><ul><li>输入流：一次读一个字节，遇到中文时，一次读多个字节</li><li>输出流：底层把数据按照指定的编码方式进行编码，变成字节再写到文件中</li></ul><h4 id="使用场景">使用场景</h4><ul><li>操作纯文本文件</li></ul><h4 id="filereader">FileReader</h4><ul><li><code>public int read()</code>：读取数据，到末尾返回 -1</li><li><code>public int read(char[] buffer)</code>：读取多个数据，到末尾返回-1<ul><li>细节：按字节进行读取，遇到中文，一次读多个字节，读取后解码，返回一个十进制整数，代表在字符集上的数字</li><li>字符流的底层也是字节流</li></ul></li></ul><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileReader</span> fr <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileReader</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> ch<span class="op">;</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>ch <span class="op">=</span> fr<span class="op">.</span><span class="fu">read</span><span class="op">())</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">((</span><span class="dt">char</span><span class="op">)</span>ch<span class="op">);</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>fr<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileReader</span> fr <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileReader</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span><span class="op">[]</span> ch <span class="op">=</span> <span class="kw">new</span> <span class="dt">char</span><span class="op">[</span><span class="dv">10</span><span class="op">];</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> len<span class="op">;</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co">//read(chars)：把读取数据、解码、强转三步合并了，把强转之后的字符放到数组当中</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="co">//空参的read + 强制类型转换</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>len <span class="op">=</span> fr<span class="op">.</span><span class="fu">read</span><span class="op">(</span>ch<span class="op">))</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="kw">new</span> <span class="bu">String</span><span class="op">(</span>ch<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> len<span class="op">));</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>fr<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h4 id="filewriter">FileWriter</h4><div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileWriter</span> fw <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileWriter</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>fw<span class="op">.</span><span class="fu">write</span><span class="op">(</span><span class="dv">25105</span><span class="op">);</span><span class="co">//根据字符集的编码方式编码，把编码之后的数据写到文件中</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>fw<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><div class="sourceCode" id="cb7"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="bu">FileWriter</span> fw <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileWriter</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span><span class="op">[]</span> ch <span class="op">=</span> <span class="op">{</span><span class="ch">'a'</span><span class="op">,</span> <span class="ch">'b'</span><span class="op">,</span> <span class="ch">'c'</span><span class="op">,</span> <span class="er">'</span>我<span class="er">'</span><span class="op">};</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>fw<span class="op">.</span><span class="fu">write</span><span class="op">(</span>ch<span class="op">);</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>fw<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h4 id="字符流底层原理">字符流底层原理</h4><ul><li>创建字符输入流对象<ul><li>关联文件，并创建缓冲区（长度为8192的字节数组）（字节流无缓冲区）</li></ul></li><li>读取数据<ul><li>判断缓冲区中是否有数据<ul><li>缓冲区无数据：从文件中获取数据，装入缓冲区，尽可能装满</li><li>缓冲区有数据：从缓冲区读取</li></ul></li><li>空参read：一次读取一个字节，遇到中文一次读多个字节，把字节解码转成十进制返回</li><li>有参read：读取字节、解码、强转三步合并，强转后的字符放到数组中</li></ul></li><li>输出数据<ul><li>在内存中创建一个8192的缓冲区，每一次write都会把内容编码写进缓冲区里，出现下面的情况时，会把缓冲区内容写入文件<ul><li>缓冲区满</li><li>刷新（<code>flush()</code>）</li><li>关流（<code>close()</code>）</li></ul></li></ul></li></ul><h2 id="缓冲流">缓冲流</h2><p>加了缓冲区的基本流</p><h3 id="字节缓冲流">字节缓冲流</h3><ul><li><code>public BufferedInputStream(InputStream is)</code></li><li><code>public BufferedOutputStream(OutputStream os)</code></li></ul><h3 id="字符缓冲流">字符缓冲流</h3><p>因为字符基本流已经有缓冲区了，所以效率提高不明显</p><ul><li><code>BufferedReader</code></li><li><code>BufferedWriter</code></li></ul><p>主要体现在两个比较好用的方法</p><ul><li>输入流：<code>public String readLine()</code>：读取一行数据，如果没数据了，返回null。<strong>但是不会读取回车换行</strong></li><li>输出流：<code>public void newLine()</code>：跨平台的换行</li></ul><h2 id="转换流">转换流</h2><p>是字符流和字节流之间的桥梁</p><p>数据源 -&gt; 字节流 -&gt; 转换流 -&gt; 内存 -&gt; 转换流 -&gt; 字节流-&gt;目的文件</p><ul><li><code>InputStreamReader</code></li><li><code>OutputStreamWriter</code></li></ul><div class="sourceCode" id="cb8"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="bu">InputStreamReader</span> isr <span class="op">=</span> <span class="kw">new</span> <span class="bu">InputStreamReader</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">),</span> <span class="st">"GBK"</span><span class="op">);</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> ch<span class="op">;</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>ch <span class="op">=</span> isr<span class="op">.</span><span class="fu">read</span><span class="op">())</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">print</span><span class="op">((</span><span class="dt">char</span><span class="op">)</span>ch<span class="op">);</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>isr<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><div class="sourceCode" id="cb9"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="bu">OutputStreamWriter</span> osw <span class="op">=</span> <span class="kw">new</span> <span class="bu">OutputStreamWriter</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">),</span> <span class="st">"GBK"</span><span class="op">);</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>osw<span class="op">.</span><span class="fu">write</span><span class="op">(</span><span class="st">"你好"</span><span class="op">);</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>osw<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><p><strong>JDK11</strong>后把<code>FileInputStream</code>和<code>FileOutputStream</code>的构造方法加入了字符编码</p><div class="sourceCode" id="cb10"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">//将本地文件中的GBK文件，转成UTF-8</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="bu">InputStreamReader</span> isr <span class="op">=</span> <span class="kw">new</span> <span class="bu">InputStreamReader</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">),</span> <span class="st">"GBK"</span><span class="op">);</span></span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="bu">OutputStreamWriter</span> osw <span class="op">=</span> <span class="kw">new</span> <span class="bu">OutputStreamWriter</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">),</span> <span class="st">"UTF-8"</span><span class="op">);</span></span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> b<span class="op">;</span></span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>b <span class="op">=</span> isr<span class="op">.</span><span class="fu">read</span><span class="op">())</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">{</span></span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>    osw<span class="op">.</span><span class="fu">write</span><span class="op">(</span>b<span class="op">);</span></span><span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>osw<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span><span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>isr<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h3 id="练习">练习</h3><div class="sourceCode" id="cb11"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">//用字节流读文件中数据，一次读一行，不能出现乱码</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="co">//1.字节流在读中文的时候，会出现乱码，用字符流没事</span></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co">//2.字节流里面是没有读一行的方法，字符缓冲流可以</span></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="co">//FileInputStream fis = new FileInputStream("");</span></span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="co">//InputStreamReader isr = new InputStreamReader(fis);</span></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="co">//BufferedReader br = new BufferedReader(isr);</span></span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="bu">BufferedReader</span> br <span class="op">=</span> <span class="kw">new</span> <span class="bu">BufferedReader</span><span class="op">(</span><span class="kw">new</span> <span class="bu">InputStreamReader</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">)));</span></span><span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> str<span class="op">;</span></span><span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">((</span>str <span class="op">=</span> br<span class="op">.</span><span class="fu">readLine</span><span class="op">())</span> <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span> <span class="op">{</span></span><span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>str<span class="op">);</span></span><span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>br<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h2 id="序列化流">序列化流</h2><ul><li>是字节流的一种</li><li>可以把Java中的对象写到本地文件中</li><li>是高级流</li></ul><h3 id="构造方法">构造方法</h3><ul><li><code>public ObjectOutputStream(OutputStream out)</code>：基本流包装成高级流</li><li><code>public final void writeObject(Object obj)</code>：把对象序列化写出</li></ul><h3 id="输出">输出</h3><div class="sourceCode" id="cb12"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>Student stu <span class="op">=</span> <span class="kw">new</span> <span class="fu">Student</span><span class="op">(</span><span class="st">"a"</span><span class="op">,</span> <span class="dv">18</span><span class="op">);</span></span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="bu">ObjectOutputStream</span> oos <span class="op">=</span> <span class="kw">new</span> <span class="bu">ObjectOutputStream</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">));</span></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>oos<span class="op">.</span><span class="fu">writeObject</span><span class="op">(</span>stu<span class="op">);</span></span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>oos<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><p><strong>注意</strong>：要序列化的Javabean类需要实现Serializable接口，Serializable接口是个标记接口</p><h3 id="输入">输入</h3><div class="sourceCode" id="cb13"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="bu">ObjectInputStream</span> ois <span class="op">=</span> <span class="kw">new</span> <span class="bu">ObjectInputStream</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">));</span></span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="co">//Object o = ois.readObject();</span></span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>Student o <span class="op">=(</span>Student<span class="op">)</span> ois<span class="op">.</span><span class="fu">readObject</span><span class="op">();</span></span><span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>o<span class="op">);</span></span><span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>ois<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h3 id="版本号">版本号</h3><ul><li><p>当一个对象实现了Serializable接口之后，每一次修改这个Javabean类都会生成新的版本号，而每次序列化会把版本号序列化进去，使得在反序列化时可能会出现序列化的对象和当前Javabean类版本号不一致的问题</p></li><li><p>可以固定版本号</p><div class="sourceCode" id="cb14"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> Student <span class="kw">implements</span> <span class="bu">Serializable</span> <span class="op">{</span></span><span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="dt">static</span> <span class="dt">final</span> <span class="dt">long</span> serialVersionUID <span class="op">=</span> <span class="dv">1L</span><span class="op">;</span><span class="co">// 唯一格式 建议自动生成</span></span><span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li></ul><h4 id="transient关键字">transient关键字</h4><ul><li>瞬态关键字</li><li>被此关键字修饰的变量不会被序列化到本地文件中</li></ul><div class="sourceCode" id="cb15"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">transient</span> <span class="bu">String</span> address<span class="op">;</span></span></code></pre></div><h2 id="打印流">打印流</h2><ul><li><p>只有输出流</p></li><li><p>字节打印流 和 字符打印流</p></li><li><p>不能操作数据源，只能操作目的地</p></li><li><p>PrintStream</p></li><li><p>PrintWriter</p></li></ul><h3 id="字节打印流">字节打印流</h3><p>字节流底层没缓冲区，自动刷新开不开没区别</p><h4 id="构造">构造</h4><ul><li><code>public PrintStream(OutputStream/File/String)</code>：关联字节输出流/文件/文件路径</li><li><code>public PrintStream(String fileName, Charset charset)</code>：指定字符编码</li><li><code>public PrintStream(OutputStream out, boolean autoFlush)</code>：自动刷新</li><li><code>public PrintStream(OutputStream out, boolean autoFlush, String encoding)</code>：指定字符编码</li></ul><h4 id="方法">方法</h4><ul><li><code>public void write(int b)</code>：常规方法，和之前一样</li><li><code>public void println(Xxx xx)</code>：特有方法，打印任意数据，自动刷新、换行</li><li><code>public void print(Xxx xx)</code>：特有方法，打印任意数据，不换行</li><li><code>public void printf(String format, Object...)</code>：特有方法，带有占位符的打印语句，不换行</li></ul><div class="sourceCode" id="cb16"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="bu">PrintStream</span> ps <span class="op">=</span> <span class="kw">new</span> <span class="bu">PrintStream</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">),</span> <span class="kw">true</span><span class="op">,</span> <span class="bu">Charset</span><span class="op">.</span><span class="fu">forName</span><span class="op">(</span><span class="st">"GBK"</span><span class="op">));</span></span><span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>ps<span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="dv">97</span><span class="op">);</span><span class="co">//写出 + 自动刷新 + 自动换行</span></span><span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>ps<span class="op">.</span><span class="fu">print</span><span class="op">(</span><span class="kw">true</span><span class="op">);</span></span><span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>ps<span class="op">.</span><span class="fu">println</span><span class="op">();</span></span><span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>ps<span class="op">.</span><span class="fu">printf</span><span class="op">(</span><span class="st">"</span><span class="sc">%s</span><span class="st"> loves </span><span class="sc">%s</span><span class="st">"</span><span class="op">,</span> <span class="st">"a"</span><span class="op">,</span> <span class="st">"b"</span><span class="op">);</span></span><span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>ps<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h3 id="字符打印流">字符打印流</h3><p>字符流底层有缓冲区，要自动刷新需要手动开启</p><h4 id="构造-1">构造</h4><ul><li><code>public PrintWriter(Writer/File/String)</code>：关联字节输出流/文件/路径</li><li><code>public PrintWriter(String fileName, Charset charset)</code>：指定字符编码</li><li><code>public PrintWriter(Write w, boolean autoFlush)</code>：自动刷新</li><li><code>public PrintWriter(OutputStream out, boolean autoFlush, Charset charset)</code>：指定字符编码且自动刷新</li></ul><h4 id="方法-1">方法</h4><p>和字节打印流一样</p><div class="sourceCode" id="cb17"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="bu">PrintWriter</span> pw <span class="op">=</span> <span class="kw">new</span> <span class="bu">PrintWriter</span><span class="op">(</span><span class="kw">new</span> <span class="bu">FileWriter</span><span class="op">(</span><span class="st">""</span><span class="op">),</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>pw<span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="st">"abc"</span><span class="op">);</span></span><span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>pw<span class="op">.</span><span class="fu">close</span><span class="op">();</span></span></code></pre></div><h4 id="用处">用处</h4><ul><li><code>System.out</code>是一个静态打印流对象，虚拟机启动的时候，由JVM赋值，默认指向控制台</li></ul><h2 id="压缩流">压缩流</h2><ul><li>只能识别.zip文件</li><li>压缩包里每一个文件在Java中是一个ZipEntry对象</li><li>解压本质：把每一个ZipEntry对象按照层级拷贝到本地另一个文件夹中</li></ul><h3 id="解压缩流">解压缩流</h3><p>ZipInputStream</p><hr><p>未完待续</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="IO流" scheme="https://ethanh3514.github.io/tags/IO%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Java File 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/15/Java-File-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/15/Java-File-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-15T13:33:16.000Z</published>
    <updated>2024-03-15T14:08:22.485Z</updated>
    
    <content type="html"><![CDATA[<p>貌似没多少东西</p><span id="more"></span><h3 id="file的构造">File的构造</h3><ul><li><code>public File(String pathname)</code>：把字符串表示的路径变成File对象</li><li><code>public File(String parent, String child)</code>：把父级路径和子级路径进行拼接</li><li><code>public File(File parent, String child)</code></li></ul><p>因为Windows和Linux的路径连接符不一样，所以还是用现有的方法会更好一点</p><h3 id="file的成员方法">File的成员方法</h3><ul><li><code>public boolean isDirectory()</code>：判断是否为文件夹</li><li><code>public boolean isFile()</code>：判断是否为文件</li><li><code>public boolean exists()</code>：判断是否存在</li><li><code>public long length()</code>：返回文件的大小（字节数），无法获取文件夹大小</li><li><code>public String getAbsolutePath()</code>：返回文件的绝对路径</li><li><code>public String getPath()</code>：返回定义文件时的路径</li><li><code>public String getName()</code>：返回文件的名称，带后缀</li><li><code>public long lastModified()</code>：返回文件最后修改时间（毫秒值）</li><li><code>public boolean createNewFile()</code>：创建一个新的空文件，需要父级路径存在</li><li><code>public boolean mkdir()</code>：创建单级文件夹</li><li><code>public boolean mkdirs()</code>：创建多级文件夹</li><li><code>public boolean delete()</code>：删除文件、空文件夹</li><li><code>public File[] listFiles()</code>：获取当前路径下所有内容<ul><li>当调用者File表示的路径不存在、是文件时，返回null</li><li>若无访问文件夹的权限，返回null</li></ul></li><li><code>public static File[] listRoots()</code>：列出可用的文件系统根</li><li><code>public String[] list()</code>：获取当前路径下所有内容</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;貌似没多少东西&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="File" scheme="https://ethanh3514.github.io/tags/File/"/>
    
  </entry>
  
  <entry>
    <title>Java 异常 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/14/Java-%E5%BC%82%E5%B8%B8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/14/Java-%E5%BC%82%E5%B8%B8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-14T13:59:58.000Z</published>
    <updated>2024-03-15T15:19:29.529Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><h2 id="异常">异常</h2><ul><li>最上层父类：<code>Exception</code></li><li>分为：编译时异常、运行时异常<ul><li>编译时异常：直接继承于<code>Exception</code>，编译阶段就会错误提示（java文件-&gt; 字节码文件）</li><li>运行时异常：<code>RuntimeException</code>本身和子类，运行时出错误提示（字节码文件-&gt; 运行结果)</li></ul></li></ul><h2 id="异常的处理方式">异常的处理方式</h2><h3 id="jvm默认处理方式">JVM默认处理方式</h3><ul><li>把异常名字、异常原因、异常出现位置以红色字体输出在控制台</li><li>程序中止</li></ul><h3 id="自己处理">自己处理</h3><ul><li>可以让程序继续执行</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span><span class="op">[]</span> arr <span class="op">=</span> <span class="op">{</span><span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">};</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="cf">try</span> <span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>arr<span class="op">[</span><span class="dv">5</span><span class="op">]);</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">catch</span><span class="op">(</span><span class="bu">ArrayIndexOutOfBoundsException</span> e<span class="op">)</span> <span class="op">{</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="st">"索引越界"</span><span class="op">);</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="st">"Hello"</span><span class="op">);</span><span class="co">//执行成功</span></span></code></pre></div><ul><li><code>try</code>中代码出现异常就中止，进入对应的catch</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span><span class="op">[]</span> arr <span class="op">=</span> <span class="op">{</span><span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">};</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="cf">try</span> <span class="op">{</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>arr<span class="op">[</span><span class="dv">10</span><span class="op">]);</span><span class="co">//ArrayIndexOutOfBoundsException</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="dv">2</span><span class="op">/</span><span class="dv">0</span><span class="op">);</span><span class="co">//ArithmeticException</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">catch</span><span class="op">(</span><span class="bu">ArrayIndexOutOfBoundsException</span> e<span class="op">)</span> <span class="op">{</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="st">"索引越界"</span><span class="op">);</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="st">"Hello"</span><span class="op">);</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="co">//输出：</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="co">//索引越界</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="co">//Hello</span></span></code></pre></div><ul><li><p>若<code>try</code>中可能遇到多个异常，写多个<code>catch</code>与之对应。</p><ul><li><strong>注意</strong>：如果这些异常中存在父子关系，父类写下面</li><li>多个<code>catch</code>也不能同时捕获多个异常，碰到第一个异常就退出了</li></ul></li><li><p><strong>JDK7</strong>之后，可以在catch中捕获多个种类的异常</p><ul><li>表示出现了A异常或B异常，采用同一种方案</li></ul><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="cf">try</span> <span class="op">{</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="cf">catch</span><span class="op">(</span><span class="bu">ArrayIndexOutOfBoundsException</span> <span class="op">|</span> <span class="bu">ArithmeticException</span> e<span class="op">)</span> <span class="op">{</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li><li><p><code>try</code>中遇到的异常没被捕获，采用JVM默认方法处理</p></li></ul><h4 id="异常的常见方法">异常的常见方法</h4><h5 id="throwable的成员方法">Throwable的成员方法</h5><ul><li><code>public void printStackTrace()</code>：把异常信息输出在控制台，不会停止程序运行</li><li><code>public String toString()</code>：返回这个可抛出的简短描述</li><li><code>public String getMessage()</code>：返回此<code>throwable</code>的详细消息字符串</li></ul><h3 id="抛出异常">抛出异常</h3><ul><li><code>throws</code>：标记在方法定义处<ul><li>编译时异常：必须写</li><li>运行时异常：可以不写</li></ul></li></ul><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="dt">void</span> <span class="fu">method</span><span class="op">()</span> <span class="kw">throws</span> 异常<span class="er">1</span><span class="op">,</span> 异常<span class="fl">2.</span><span class="op">..</span> <span class="op">{</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">...</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><ul><li><code>throw</code>：手动抛出异常对象，抛出后中止</li></ul><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="dt">static</span> <span class="dt">int</span> <span class="fu">getMax</span><span class="op">(</span><span class="dt">int</span><span class="op">[]</span> arr<span class="op">)</span> <span class="op">{</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>arr <span class="op">==</span> <span class="kw">null</span><span class="op">)</span> <span class="op">{</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">NullPointerException</span><span class="op">();</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>arr<span class="op">.</span><span class="fu">length</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">throw</span> <span class="kw">new</span> <span class="bu">ArrayIndexOutOfBoundsException</span><span class="op">();</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">...</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h2 id="自定义异常">自定义异常</h2><p>主要是写自定义的名字</p><ul><li>定义异常类</li><li>继承</li><li>写空参和带参构造</li></ul><div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> NameFormatException <span class="kw">extends</span> <span class="bu">RuntimeException</span> <span class="op">{</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="fu">NameFormatException</span><span class="op">()</span> <span class="op">{</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="fu">NameFormatException</span><span class="op">(</span><span class="bu">String</span> message<span class="op">)</span> <span class="op">{</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">super</span><span class="op">(</span>message<span class="op">);</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h3 id="try-catch-finally">try catch finally</h3><h4 id="jdk7io流中捕获异常的写法">JDK7：IO流中捕获异常的写法</h4><p>只有实现了<code>AutoCloseable</code>接口的类才能在小括号中创建对象</p><div class="sourceCode" id="cb7"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span><span class="op">(</span><span class="bu">String</span><span class="op">[]</span> args<span class="op">)</span> <span class="op">{</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span><span class="op">(</span><span class="bu">FileInputStream</span> fis <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>       <span class="bu">FileOutputStream</span> fos <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">))</span> <span class="op">{</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">catch</span><span class="op">(</span><span class="bu">IOException</span> e<span class="op">)</span> <span class="op">{</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        e<span class="op">.</span><span class="fu">printStackTrace</span><span class="op">();</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><p>资源自动释放</p><h4 id="jdk9">JDK9</h4><div class="sourceCode" id="cb8"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span><span class="op">(</span><span class="bu">String</span><span class="op">[]</span> args<span class="op">)</span> <span class="kw">throws</span> <span class="bu">FileNotFoundException</span> <span class="op">{</span><span class="co">//因为对象创建在外面，所以需要抛出异常</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">FileInputStream</span> fis <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileInputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">FileOutputStream</span> fos <span class="op">=</span> <span class="kw">new</span> <span class="bu">FileOutputStream</span><span class="op">(</span><span class="st">""</span><span class="op">);</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span><span class="op">(</span>fis<span class="op">;</span>fos<span class="op">)</span> <span class="op">{</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">catch</span><span class="op">(</span><span class="bu">IOException</span> e<span class="op">)</span> <span class="op">{</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>        e<span class="op">.</span><span class="fu">printStackTrace</span><span class="op">();</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="异常" scheme="https://ethanh3514.github.io/tags/%E5%BC%82%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Java 方法引用 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/14/Java-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/14/Java-%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-14T09:42:35.000Z</published>
    <updated>2024-03-14T14:00:45.096Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><ul><li>方法引用就是把已经有的方法拿过来用，当做函数式接口中抽象方法的方法体</li><li><code>::</code>是方法引用符</li></ul><h4 id="要求">要求</h4><ul><li>需要有函数式接口</li><li>被引用的方法必须已经存在</li><li>被引用方法的形参和返回值需要和抽象方法保持一致</li><li>被引用方法的功能要满足当前需求</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">Arrays</span><span class="op">;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> FunctionDemo <span class="op">{</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span><span class="op">(</span><span class="bu">String</span><span class="op">[]</span> args<span class="op">)</span> <span class="op">{</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">Integer</span><span class="op">[]</span> list <span class="op">=</span> <span class="op">{</span><span class="dv">3</span><span class="op">,</span> <span class="dv">5</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">4</span><span class="op">};</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">Arrays</span><span class="op">.</span><span class="fu">sort</span><span class="op">(</span>list<span class="op">,</span> FunctionDemo<span class="op">::</span>subtraction<span class="op">);</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="bu">Arrays</span><span class="op">.</span><span class="fu">toString</span><span class="op">(</span>list<span class="op">));</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">int</span> <span class="fu">subtraction</span><span class="op">(</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> b <span class="op">-</span> a<span class="op">;</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h3 id="各种方法的引用格式">各种方法的引用格式</h3><h4 id="引用静态方法">引用静态方法</h4><ul><li><strong>格式</strong>：<code>类名::静态方法</code></li><li><code>Integer::parseInt</code></li></ul><h4 id="引用成员方法">引用成员方法</h4><ul><li><strong>格式</strong>：<code>对象::成员方法</code></li><li>其他类：其他类对象::方法名</li><li>本类：<code>this::方法名</code>（引用处不能是静态方法，静态方法中无this）</li><li>父类：<code>super::方法名</code>（引用处不能是静态方法，静态方法中无super）</li></ul><h4 id="引用构造方法">引用构造方法</h4><ul><li>格式：<code>类名::new</code></li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">//psvm</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">ArrayList</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> list <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="bu">Collections</span><span class="op">.</span><span class="fu">addAll</span><span class="op">(</span>list<span class="op">,</span> <span class="st">"aaa"</span><span class="op">,</span> <span class="st">"bbb"</span><span class="op">,</span> <span class="st">"ccc"</span><span class="op">);</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>list<span class="op">.</span><span class="fu">stream</span><span class="op">().</span><span class="fu">map</span><span class="op">(</span>Student<span class="op">::</span><span class="kw">new</span><span class="op">);</span><span class="co">//这样会调用Student中和stream流里数据类型一致的构造方法</span></span></code></pre></div><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">//Student中添加对应的构造方法</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="fu">Student</span><span class="op">(</span><span class="bu">String</span> str<span class="op">)</span> <span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h4 id="使用类名引用成员方法">使用类名引用成员方法</h4><ul><li><p>格式：<code>类名::成员方法</code></p></li><li><p>第一个参数：表示被引用方法的调用者，决定了可以引用哪些类中的方法</p><ul><li>在Stream流里面，第一个参数一般都表示流里面的每一个数据，假设流里面的数据是字符串，那么使用这种方法进行方法引用，只能引用String这个类中的方法</li><li>第二个参数到最后一个参数：跟被引用方法的形参保持一致，如果没有第二个参数，说明被引用的方法需要是无参的成员方法</li></ul><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="bu">ArrayList</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> list <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="bu">Collections</span><span class="op">.</span><span class="fu">addAll</span><span class="op">(</span>list<span class="op">,</span> <span class="st">"aaa"</span><span class="op">,</span> <span class="st">"bbb"</span><span class="op">,</span> <span class="st">"ccc"</span><span class="op">);</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co">//拿着流里面的每一个数据，去调用String类中的toUpperCase方法，方法的返回值就是转换之后的结果</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>list<span class="op">.</span><span class="fu">stream</span><span class="op">().</span><span class="fu">map</span><span class="op">(</span><span class="bu">String</span><span class="op">::</span>toUpperCase<span class="op">).</span><span class="fu">forEach</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">));</span></span></code></pre></div></li><li><p><strong>局限性</strong>：</p><ul><li>不能引用所有类中的成员方法</li><li>与抽象方法的第一个参数有关，这个参数是什么类型的，那么就只能引用这个类中的方法</li></ul></li><li><p>在Stream流当中，第一个参数一般都表示流里面的每一个数据。</p></li></ul><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>list<span class="op">.</span><span class="fu">stream</span><span class="op">().</span><span class="fu">filter</span><span class="op">(</span><span class="kw">new</span> <span class="fu">StringOperation</span><span class="op">()::</span>stringJudge<span class="op">).</span><span class="fu">forEach</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">));</span></span></code></pre></div><h4 id="引用数组的构造方法">引用数组的构造方法</h4><ul><li>格式：<code>数据类型[]::new</code></li><li>数组的类型需要和流中数据类型保持一致</li></ul><div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">ArrayList</span><span class="op">;</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">Arrays</span><span class="op">;</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">Collections</span><span class="op">;</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> FunctionDemo1 <span class="op">{</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span><span class="op">(</span><span class="bu">String</span><span class="op">[]</span> args<span class="op">)</span> <span class="op">{</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">ArrayList</span><span class="op">&lt;</span><span class="bu">Integer</span><span class="op">&gt;</span> list <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        <span class="bu">Collections</span><span class="op">.</span><span class="fu">addAll</span><span class="op">(</span>list<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>        <span class="bu">Integer</span><span class="op">[]</span> arr <span class="op">=</span> list<span class="op">.</span><span class="fu">stream</span><span class="op">().</span><span class="fu">toArray</span><span class="op">(</span><span class="bu">Integer</span><span class="op">[]::</span><span class="kw">new</span><span class="op">);</span></span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span><span class="bu">Arrays</span><span class="op">.</span><span class="fu">toString</span><span class="op">(</span>arr<span class="op">));</span></span><span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="方法引用" scheme="https://ethanh3514.github.io/tags/%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java Stream流 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/13/Java-Stream%E6%B5%81-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/13/Java-Stream%E6%B5%81-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-13T13:33:51.000Z</published>
    <updated>2024-03-13T15:12:14.474Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><h4 id="作用">作用</h4><ul><li>结合lambda表达式，简化集合、数组的操作</li></ul><h4 id="使用步骤">使用步骤</h4><ul><li>获取Stream流对象</li><li>使用中间方法处理数据</li><li>使用终结方法处理数据</li></ul><h4 id="获取方式">获取方式</h4><ul><li>单列集合：<code>Collection</code>中的默认方法：<code>default Stream&lt;E&gt; stream()</code></li><li>双列集合：不可以</li><li>数组：<code>Arrays</code>工具类中的静态方法：<code>public static &lt;T&gt; Stream&lt;T&gt; stream(T[] array)</code></li><li>一堆零散数据：<code>Stream</code>接口中的静态方法：<code>public static &lt;T&gt; Stream&lt;T&gt; of(T... values)</code></li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span><span class="op">[]</span> arr1 <span class="op">=</span> <span class="op">{</span><span class="dv">1</span><span class="op">,</span><span class="dv">2</span><span class="op">,</span><span class="dv">3</span><span class="op">,</span><span class="dv">4</span><span class="op">};</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span><span class="op">[]</span> arr2 <span class="op">=</span> <span class="op">{</span><span class="st">"a"</span><span class="op">,</span><span class="st">"b"</span><span class="op">,</span><span class="st">"c"</span><span class="op">};</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="bu">Arrays</span><span class="op">.</span><span class="fu">stream</span><span class="op">(</span>arr1<span class="op">).</span><span class="fu">forEach</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">));</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="bu">Arrays</span><span class="op">.</span><span class="fu">stream</span><span class="op">(</span>arr2<span class="op">).</span><span class="fu">forEach</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">));</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>Stream<span class="op">.</span><span class="fu">of</span><span class="op">(</span><span class="dv">1</span><span class="op">,</span><span class="dv">2</span><span class="op">,</span><span class="dv">3</span><span class="op">,</span><span class="dv">4</span><span class="op">,</span><span class="dv">5</span><span class="op">).</span><span class="fu">forEach</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">));</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co">//需要注意：</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="co">//Stream接口中静态方法of的细节</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="co">//方法的形参是一个可变参数，可以传零散数据，也可以传数组</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="co">//传数组就必须传引用数据类型的数组，若传基本数据类型，则会把数组当做一个元素</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>Stream<span class="op">.</span><span class="fu">of</span><span class="op">(</span>arr1<span class="op">).</span><span class="fu">forEach</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">));</span><span class="co">//打印数组地址</span></span></code></pre></div><h4 id="中间方法">中间方法</h4><ul><li><code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt;predicate)</code>：过滤</li><li><code>Stream&lt;T&gt; limit(long maxSize)</code>：获取前几个元素</li><li><code>Stream&lt;T&gt; skip(long n)</code>：跳过前几个元素</li><li><code>Stream&lt;T&gt; distinct()</code>：元素去重，依赖(hashCode和equals方法)，底层用的HashSet</li><li><code>static &lt;T&gt; Stream&lt;T&gt; concat(Stream a, Stream b)</code>：合并a和b两个流为一个流</li><li><code>Stream&lt;R&gt; map(Function&lt;T, R&gt; mapper)</code>：转换流中的数据类型</li></ul><p><strong>注意</strong>：会返回新的Stream流，原来的Stream流只能使用一次</p><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">ArrayList</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> list <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">Collections</span><span class="op">.</span><span class="fu">addAll</span><span class="op">(</span>list<span class="op">,</span> <span class="st">"a"</span><span class="op">,</span> <span class="st">"b"</span><span class="op">,</span> <span class="st">"c"</span><span class="op">);</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>list<span class="op">.</span><span class="fu">stream</span><span class="op">().</span><span class="fu">filter</span><span class="op">(</span>s <span class="op">-&gt;</span> s<span class="op">.</span><span class="fu">startWith</span><span class="op">(</span><span class="st">"a"</span><span class="op">)).</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">forEach</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">));</span></span></code></pre></div><h4 id="终结方法">终结方法</h4><ul><li><code>void forEach(Consumer action)</code>：遍历</li><li><code>long count()</code>：统计</li><li><code>toArray()</code>：把流中数据收集到数组中</li><li><code>collect(Collector collector)</code>：把流中数据收到集合中</li></ul><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span><span class="op">[]</span> arr <span class="op">=</span> list<span class="op">.</span><span class="fu">stream</span><span class="op">().</span><span class="fu">toArray</span><span class="op">(</span>value <span class="op">-&gt;</span> <span class="kw">new</span> <span class="bu">String</span><span class="op">[</span>value<span class="op">]);</span><span class="co">//value是流中数据的个数</span></span></code></pre></div><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="bu">List</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> newList <span class="op">=</span> list<span class="op">.</span><span class="fu">stream</span><span class="op">().</span><span class="fu">filter</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="st">"男"</span><span class="op">.</span><span class="fu">equals</span><span class="op">(</span>s<span class="op">.</span><span class="fu">split</span><span class="op">(</span><span class="st">"-"</span><span class="op">)[</span><span class="dv">1</span><span class="op">])).</span><span class="fu">collect</span><span class="op">(</span>Collectors<span class="op">.</span><span class="fu">toList</span><span class="op">());</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="bu">Set</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> newSet <span class="op">=</span> list<span class="op">.</span><span class="fu">stream</span><span class="op">().</span><span class="fu">filter</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="st">"男"</span><span class="op">.</span><span class="fu">equals</span><span class="op">(</span>s<span class="op">.</span><span class="fu">split</span><span class="op">(</span><span class="st">"-"</span><span class="op">)[</span><span class="dv">1</span><span class="op">])).</span><span class="fu">collect</span><span class="op">(</span>Collectors<span class="op">.</span><span class="fu">toSet</span><span class="op">());</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co">//如果把数据收集到Map中，键不能重复，否则报错</span></span></code></pre></div><h3 id="示例代码">示例代码</h3><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="bu">ArrayList</span><span class="op">&lt;</span><span class="bu">Integer</span><span class="op">&gt;</span> list <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="bu">Collections</span><span class="op">.</span><span class="fu">addAll</span><span class="op">(</span>list<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span><span class="op">,</span> <span class="dv">6</span><span class="op">,</span> <span class="dv">7</span><span class="op">,</span> <span class="dv">8</span><span class="op">,</span> <span class="dv">9</span><span class="op">,</span> <span class="dv">10</span><span class="op">);</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="bu">List</span><span class="op">&lt;</span><span class="bu">Integer</span><span class="op">&gt;</span> newList <span class="op">=</span> list<span class="op">.</span><span class="fu">stream</span><span class="op">()</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">filter</span><span class="op">(</span>s <span class="op">-&gt;</span> s<span class="op">%</span><span class="dv">2</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">collect</span><span class="op">(</span>Collectors<span class="op">.</span><span class="fu">toList</span><span class="op">());</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>newList<span class="op">);</span></span></code></pre></div><div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="bu">ArrayList</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> list <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>list<span class="op">.</span><span class="fu">add</span><span class="op">(</span><span class="st">"zhangsan,23"</span><span class="op">);</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>list<span class="op">.</span><span class="fu">add</span><span class="op">(</span><span class="st">"lisi,24"</span><span class="op">);</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>list<span class="op">.</span><span class="fu">add</span><span class="op">(</span><span class="st">"wangwu,25"</span><span class="op">);</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="bu">Map</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">,</span> <span class="bu">Integer</span><span class="op">&gt;</span> mp <span class="op">=</span> list<span class="op">.</span><span class="fu">stream</span><span class="op">()</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">filter</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="bu">Integer</span><span class="op">.</span><span class="fu">parseInt</span><span class="op">(</span>s<span class="op">.</span><span class="fu">split</span><span class="op">(</span><span class="st">","</span><span class="op">)[</span><span class="dv">1</span><span class="op">])</span> <span class="op">&gt;=</span> <span class="dv">24</span><span class="op">)</span></span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span><span class="fu">collect</span><span class="op">(</span>Collectors<span class="op">.</span><span class="fu">toMap</span><span class="op">(</span>s <span class="op">-&gt;</span> s<span class="op">.</span><span class="fu">split</span><span class="op">(</span><span class="st">","</span><span class="op">)[</span><span class="dv">0</span><span class="op">],</span> s <span class="op">-&gt;</span> <span class="bu">Integer</span><span class="op">.</span><span class="fu">parseInt</span><span class="op">(</span>s<span class="op">.</span><span class="fu">split</span><span class="op">(</span><span class="st">","</span><span class="op">)[</span><span class="dv">1</span><span class="op">])));</span></span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>mp<span class="op">);</span></span></code></pre></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="Stream流" scheme="https://ethanh3514.github.io/tags/Stream%E6%B5%81/"/>
    
    <category term="学习笔记" scheme="https://ethanh3514.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java 不可变集合 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/13/Java-%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/13/Java-%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-13T13:02:40.000Z</published>
    <updated>2024-03-13T13:19:26.368Z</updated>
    
    <content type="html"><![CDATA[<p>qaq</p><span id="more"></span><h3 id="不可变集合">不可变集合</h3><ul><li>创建以后不能修改长度和内容</li><li>将不能被修改的数据防御性地拷贝到不可变集合中</li><li>集合对象被不可信的库调用时，不可变形式是安全的</li></ul><h4 id="创建">创建</h4><ul><li><code>List</code>、<code>Set</code>、<code>Map</code>接口里，都有<code>of</code>方法可以创建不可变集合</li></ul><h4 id="细节">细节</h4><ul><li><code>List</code>：直接用</li><li><code>Set</code>：元素不能重复</li><li><code>Map</code>：元素不能重复，直接传键值对数量不超过10。超过10个用<code>ofEntries</code>方法</li></ul><h4 id="示例">示例</h4><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="bu">List</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> list <span class="op">=</span> <span class="bu">List</span><span class="op">.</span><span class="fu">of</span><span class="op">(</span><span class="st">"a"</span><span class="op">,</span> <span class="st">"b"</span><span class="op">,</span> <span class="st">"c"</span><span class="op">,</span> <span class="st">"d"</span><span class="op">);</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="bu">Set</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> set <span class="op">=</span> <span class="bu">Set</span><span class="op">.</span><span class="fu">of</span><span class="op">(</span><span class="st">"a"</span><span class="op">,</span> <span class="st">"b"</span><span class="op">,</span> <span class="st">"c"</span><span class="op">,</span> <span class="st">"d"</span><span class="op">);</span></span></code></pre></div><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">Map</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">,</span> <span class="bu">String</span><span class="op">&gt;</span> mp <span class="op">=</span> <span class="bu">Map</span><span class="op">.</span><span class="fu">of</span><span class="op">(</span><span class="st">"a"</span><span class="op">,</span> <span class="st">"A"</span><span class="op">,</span> <span class="st">"b"</span><span class="op">,</span> <span class="st">"B"</span><span class="op">);</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co">//参数为 键，值，键，值</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co">//这样最多传20个参即10对键值</span></span></code></pre></div><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">//已有的Map</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="bu">HashMap</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">,</span> <span class="bu">String</span><span class="op">&gt;</span> hm <span class="op">=</span> <span class="kw">new</span> <span class="bu">HashMap</span><span class="op">&lt;&gt;();</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">//获取键值对对象</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="bu">Set</span><span class="op">&lt;</span><span class="bu">Map</span><span class="op">.</span><span class="fu">Entry</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">,</span> <span class="bu">String</span><span class="op">&gt;&gt;</span> entries <span class="op">=</span> hm<span class="op">.</span><span class="fu">entrySet</span><span class="op">();</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="co">//toArray方法在底层会比较集合的长度和数组的长度两者大小关系</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="co">//若集合长度 大于 数组长度，那么重新创建数组</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="co">//如果集合长度 不超过 数组长度，直接用</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="co">//所以new一个0长度比较合适</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="bu">Map</span><span class="op">.</span><span class="fu">Entry</span><span class="op">[]</span> arr <span class="op">=</span> entries<span class="op">.</span><span class="fu">toArray</span><span class="op">(</span><span class="kw">new</span> <span class="bu">Map</span><span class="op">.</span><span class="fu">Entry</span><span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="co">//不可变的map集合</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="bu">Map</span> mmp <span class="op">=</span> <span class="bu">Map</span><span class="op">.</span><span class="fu">ofEntries</span><span class="op">(</span>arr<span class="op">);</span></span></code></pre></div><h4 id="另一种方法jdk8忽略">另一种方法（jdk8忽略）</h4><p>最方便的方式</p><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="op">&lt;</span>K<span class="op">,</span> V<span class="op">&gt;</span> <span class="bu">Map</span><span class="op">&lt;</span>K<span class="op">,</span>V<span class="op">&gt;</span> <span class="fu">copyOf</span><span class="op">(</span><span class="bu">Map</span><span class="op">&lt;?</span> <span class="kw">extends</span> K<span class="op">,</span> <span class="op">?</span> <span class="kw">extends</span> V<span class="op">&gt;</span> map<span class="op">)</span> <span class="op">{</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>map <span class="kw">instanceof</span> ImmutableCollections<span class="op">.</span><span class="fu">AbstractImmutableMap</span><span class="op">)</span> <span class="op">{</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="op">(</span><span class="bu">Map</span><span class="op">&lt;</span>K<span class="op">,</span>V<span class="op">&gt;)</span>map<span class="op">;</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="op">(</span><span class="bu">Map</span><span class="op">&lt;</span>K<span class="op">,</span>V<span class="op">&gt;)</span><span class="bu">Map</span><span class="op">.</span><span class="fu">ofEntries</span><span class="op">(</span>map<span class="op">.</span><span class="fu">entrySet</span><span class="op">().</span><span class="fu">toArray</span><span class="op">(</span><span class="kw">new</span> Entry<span class="op">[</span><span class="dv">0</span><span class="op">]));</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;qaq&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="不可变集合" scheme="https://ethanh3514.github.io/tags/%E4%B8%8D%E5%8F%AF%E5%8F%98%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>Java Map 学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/13/Java-Map-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/13/Java-Map-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-13T07:28:07.000Z</published>
    <updated>2024-03-13T12:53:08.548Z</updated>
    
    <content type="html"><![CDATA[<p>owo</p><span id="more"></span><h2 id="map的方法">Map的方法</h2><h3 id="遍历">遍历</h3><h4 id="获取键的集合再遍历这个单列集合">获取键的集合，再遍历这个单列集合</h4><p>遍历单列集合的方式：</p><ul><li>增强for</li><li>迭代器</li><li>forEach( + lambda)表达式</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="bu">Map</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">,</span> <span class="bu">String</span><span class="op">&gt;</span> map <span class="op">=</span> <span class="kw">new</span> <span class="bu">HashMap</span><span class="op">&lt;&gt;();</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>map<span class="op">.</span><span class="fu">put</span><span class="op">(</span><span class="st">"abc"</span><span class="op">,</span> <span class="st">"123"</span><span class="op">);</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="bu">Set</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> keys <span class="op">=</span> map<span class="op">.</span><span class="fu">keySet</span><span class="op">();</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(</span><span class="bu">String</span> key <span class="op">:</span> keys<span class="op">)</span> <span class="op">{</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">String</span> value <span class="op">=</span> map<span class="op">.</span><span class="fu">get</span><span class="op">(</span>key<span class="op">);</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>key <span class="op">+</span> <span class="st">" = "</span> <span class="op">+</span> value<span class="op">);</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h4 id="获取键值对对象再遍历这个单列集合">获取键值对对象，再遍历这个单列集合</h4><p>Entry是Map的一个内部接口，需要用Map.Entry访问或者导包</p><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">Map</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">,</span> <span class="bu">String</span><span class="op">&gt;</span> map <span class="op">=</span> <span class="kw">new</span> <span class="bu">HashMap</span><span class="op">&lt;&gt;();</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="bu">Set</span><span class="op">&lt;</span><span class="bu">Map</span><span class="op">.</span><span class="fu">Entry</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">,</span> <span class="bu">String</span><span class="op">&gt;&gt;</span> entries <span class="op">=</span> map<span class="op">.</span><span class="fu">entrySet</span><span class="op">();</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(</span><span class="bu">Map</span><span class="op">.</span><span class="fu">Entry</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">,</span> <span class="bu">String</span><span class="op">&gt;</span> entry <span class="op">:</span> entries<span class="op">)</span> <span class="op">{</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>entry<span class="op">.</span><span class="fu">getKey</span><span class="op">()</span> <span class="op">+</span> <span class="st">" = "</span> <span class="op">+</span> entry<span class="op">.</span><span class="fu">getValue</span><span class="op">());</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h4 id="函数式接口遍历">函数式接口遍历</h4><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>map<span class="op">.</span><span class="fu">forEach</span><span class="op">(</span><span class="kw">new</span> BiConsumer<span class="op">&lt;</span><span class="bu">String</span><span class="op">,</span> <span class="bu">String</span><span class="op">&gt;()</span> <span class="op">{</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="at">@Override</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">accept</span><span class="op">(</span><span class="bu">String</span> key<span class="op">,</span> <span class="bu">String</span> value<span class="op">)</span> <span class="op">{</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>key <span class="op">+</span> <span class="st">" = "</span> <span class="op">+</span> value<span class="op">);</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="op">});</span></span></code></pre></div><p>这是一个函数式接口，可以用lambda表达式简化</p><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>map<span class="op">.</span><span class="fu">forEach</span><span class="op">((</span>key<span class="op">,</span> value<span class="op">)</span> <span class="op">-&gt;</span> <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>key <span class="op">+</span> <span class="st">" = "</span> <span class="op">+</span> value<span class="op">));</span></span></code></pre></div><p>map的forEach底层是用增强for遍历EntrySet</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;owo&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Map" scheme="https://ethanh3514.github.io/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>Java TreeSet学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/12/Java-TreeSet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/12/Java-TreeSet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-12T15:42:58.000Z</published>
    <updated>2024-03-12T15:52:51.508Z</updated>
    
    <content type="html"><![CDATA[<p>跟C++中的set差不多，主要在比较方法重写上不太一样</p><span id="more"></span><h4 id="第一种排序方式">第一种排序方式</h4><p>Javabean类实现<code>Comparable</code>接口指定比较规则</p><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> Student <span class="kw">implements</span> <span class="bu">Comparable</span><span class="op">&lt;</span>Student<span class="op">&gt;</span> <span class="op">{</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="at">@Override</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">int</span> <span class="fu">compareTo</span><span class="op">(</span>Student o<span class="op">)</span> <span class="op">{</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="kw">this</span><span class="op">.</span><span class="fu">getAge</span><span class="op">()</span> <span class="op">-</span> o<span class="op">.</span><span class="fu">getAge</span><span class="op">();</span><span class="co">//升序</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h4 id="第二种排序方式">第二种排序方式</h4><p>在创建TreeSet对象时传入一个比较器（实现了Comparator接口的类）</p><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">TreeSet</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> ts <span class="op">=</span> <span class="kw">new</span> <span class="bu">TreeSet</span><span class="op">&lt;&gt;(</span><span class="kw">new</span> <span class="bu">Comparator</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;()</span> <span class="op">{</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="at">@Override</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">int</span> <span class="fu">compare</span><span class="op">(</span><span class="bu">String</span> o1<span class="op">,</span> <span class="bu">String</span> o2<span class="op">)</span> <span class="op">{</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> o1<span class="op">.</span><span class="fu">length</span><span class="op">()</span> <span class="op">-</span>o2<span class="op">.</span><span class="fu">length</span><span class="op">();</span><span class="co">//长度升序</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="op">});</span></span></code></pre></div><p>这个接口是一个函数式接口，可以用lambda</p><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="bu">TreeSet</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> ts <span class="op">=</span> <span class="kw">new</span> <span class="bu">TreeSet</span><span class="op">&lt;&gt;((</span>o1<span class="op">,</span> o2<span class="op">)</span> <span class="op">-&gt;</span> <span class="op">{</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> o1<span class="op">.</span><span class="fu">length</span><span class="op">()</span> <span class="op">-</span> o2<span class="op">.</span><span class="fu">length</span><span class="op">();</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">});</span></span></code></pre></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;跟C++中的set差不多，主要在比较方法重写上不太一样&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="TreeSet" scheme="https://ethanh3514.github.io/tags/TreeSet/"/>
    
  </entry>
  
  <entry>
    <title>Java HashSet学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/12/Java-HashSet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/12/Java-HashSet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-12T14:40:10.000Z</published>
    <updated>2024-03-12T14:50:33.875Z</updated>
    
    <content type="html"><![CDATA[<p>owo</p><span id="more"></span><h3 id="底层原理">底层原理</h3><ul><li>创建默认长度 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1000 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span>，默认加载因子为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.023ex" height="1.579ex" role="img" focusable="false" viewBox="0 -676 1778 698"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g></g></g></svg></mjx-container></span> 的数组 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.713ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 2083 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(361,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(890,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1319,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1617,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container></span> ，当数组中存放超过 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="13.701ex" height="1.715ex" role="img" focusable="false" viewBox="0 -676 6056 758"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(1222.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1944.4,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(778,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(4000.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5056,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span>个元素，数组扩容，长度为原来2倍</li><li>根据元素的哈希值和数组的长度计算出应存入的位置 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="26.729ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 11814 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(988,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1734.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2790.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3179.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(3477.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3943.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4765.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5766,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6266,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(6655,0)"><path data-c="26" d="M156 540Q156 620 201 668T302 716Q354 716 377 671T401 578Q401 505 287 386L274 373Q309 285 416 148L429 132L437 142Q474 191 543 309L562 341V349Q562 368 541 376T498 385H493V431H502L626 428Q709 428 721 431H727V385H712Q688 384 669 379T639 369T618 354T603 337T591 316T578 295Q537 223 506 176T464 117T454 104Q454 102 471 85T497 62Q543 24 585 24Q618 24 648 48T682 113V121H722V112Q721 94 714 75T692 32T646 -7T574 -22Q491 -19 414 42L402 51L391 42Q312 -22 224 -22Q144 -22 93 25T42 135Q42 153 46 169T55 197T74 225T96 249T125 278T156 308L195 347L190 360Q185 372 182 382T174 411T165 448T159 491T156 540ZM361 576Q361 613 348 646T305 679Q272 679 252 649T232 572Q232 497 255 426L259 411L267 420Q361 519 361 576ZM140 164Q140 103 167 64T240 24Q271 24 304 36T356 61T374 77Q295 156 235 262L220 292L210 310L193 293Q177 277 169 268T151 229T140 164Z"></path></g><g data-mml-node="mi" transform="translate(7433,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(8009,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(8538,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(9007,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(9583,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(10343,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(10828,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(11348,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container></span></li><li>判断当前位置是否为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 1768 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1172,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1470,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></svg></mjx-container></span> ，若<span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 1768 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1172,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1470,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></svg></mjx-container></span> 则直接存入</li><li>如果不为 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 1768 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1172,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1470,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g></g></g></svg></mjx-container></span>，调用<code>equals</code>方法依次比较此位置上所有元素属性值，若有一个相同，则不存入，否则放在这个元素链尾（新元素挂在老元素下面）</li><li>若数组长度大于 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.581ex" role="img" focusable="false" viewBox="0 -677 1000 699"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></span>，有一个位置元素链长度大于 <span class="math inline"><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></svg></mjx-container></span>，则此元素链转为红黑树</li></ul><h3 id="版本差异">版本差异</h3><h4 id="jdk8以前">JDK8以前</h4><ul><li>数组+链表</li><li>新元素存入数组，老元素挂在新元素下面</li></ul><h4 id="jdk8以后">JDK8以后</h4><ul><li>数组+链表+红黑树</li><li>新元素存入数组，直接挂在老元素下面</li><li>链表长度超过8，数组长度大于等于64时，链表转为红黑树</li></ul><h3 id="注意事项">注意事项</h3><ul><li><code>hashCode</code>默认用地址，不同的对象就算属性值相同也不一定哈希相同</li><li>若集合中存储的是自定义对象，必须重写<code>hashCode</code>和<code>equals</code>方法</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;owo&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="HashSet" scheme="https://ethanh3514.github.io/tags/HashSet/"/>
    
  </entry>
  
  <entry>
    <title>二叉查找树、平衡二叉树、红黑树学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/12/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E3%80%81%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/12/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E3%80%81%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-12T08:21:41.000Z</published>
    <updated>2024-03-12T09:12:29.283Z</updated>
    
    <content type="html"><![CDATA[<p>owo</p><span id="more"></span><h2 id="二叉查找树">二叉查找树</h2><ul><li>是一个二叉树</li><li>对于每个节点，左子结点比自己小，右子节点比自己大</li></ul><p><strong>弊端</strong>：可能退化成链表，导致查询效率降低</p><h2 id="平衡二叉树">平衡二叉树</h2><ul><li><p>是一个二叉查找树</p></li><li><p>对于每个节点，左子树和右子树高度相差不超过1</p></li><li><p>插入节点之后可能会破坏平衡，需要通过旋转恢复平衡</p></li><li><p>旋转规则详见网络</p></li></ul><h2 id="红黑树">红黑树</h2><ul><li>二叉查找B树</li><li>不是高度平衡的</li><li><strong>红黑规则</strong></li></ul><h3 id="红黑规则">红黑规则</h3><ul><li>每一个节点是红色或黑色</li><li>根节点黑色</li><li>若一个节点无子节点或父节点，则这个节点属性值为Nil，视为叶节点，每个Nil叶节点是黑色的<code>（根节点无父节点）</code></li><li>红色节点的子节点必须是黑色</li><li>对每个节点，从这个节点到所有后代叶子结点的简单路径上，包含相同数目的黑色节点</li></ul><h3 id="添加节点">添加节点</h3><ul><li>添加的节点默认红色（效率高）</li></ul><h4 id="添加的节点为根">添加的节点为根</h4><ul><li>直接变为黑色</li></ul><h4 id="添加的节点非根">添加的节点非根</h4><h5 id="父为黑">父为黑</h5><ul><li>不需要操作</li></ul><h5 id="父为红">父为红</h5><h6 id="叔叔红">叔叔红</h6><ul><li>父 -&gt; 黑，叔 -&gt; 黑</li><li>祖父 -&gt; 红</li><li>若祖父为根，祖父 -&gt; 黑</li><li>若祖父非根，祖父 -&gt; 当前节点</li></ul><h6 id="叔叔黑当前节点是父节点右儿子">叔叔黑，当前节点是父节点右儿子</h6><ul><li>将父节点作为当前节点并左旋，接着判断</li></ul><h6 id="叔叔黑当前节点是父节点左儿子">叔叔黑，当前节点是父节点左儿子</h6><ul><li>父 -&gt; 黑</li><li>祖父 -&gt; 红</li><li>以祖父为支点右旋</li></ul><h3 id="优点">优点</h3><p>增删改查性能很好</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;owo&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="数据结构" scheme="https://ethanh3514.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="二叉树" scheme="https://ethanh3514.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="二叉查找树" scheme="https://ethanh3514.github.io/tags/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
    
    <category term="平衡二叉树" scheme="https://ethanh3514.github.io/tags/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    <category term="红黑树" scheme="https://ethanh3514.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Java 泛型学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/12/Java-%E6%B3%9B%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/12/Java-%E6%B3%9B%E5%9E%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-12T06:34:22.000Z</published>
    <updated>2024-03-12T07:01:29.320Z</updated>
    
    <content type="html"><![CDATA[<p>大部分都和C++中一样，主要注意泛型和多态相关的一部分内容</p><span id="more"></span><h3 id="泛型与多态">泛型与多态</h3><h4 id="泛型不具备继承性">泛型不具备继承性</h4><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">ArrayList</span><span class="op">;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> GenericsDemo <span class="op">{</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span><span class="op">(</span><span class="bu">String</span><span class="op">[]</span> args<span class="op">)</span> <span class="op">{</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">ArrayList</span><span class="op">&lt;</span>Ye<span class="op">&gt;</span> list1 <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">ArrayList</span><span class="op">&lt;</span>Fu<span class="op">&gt;</span> list2 <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">ArrayList</span><span class="op">&lt;</span>Zi<span class="op">&gt;</span> list3 <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="fu">method</span><span class="op">(</span>list1<span class="op">);</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        <span class="fu">method</span><span class="op">(</span>list2<span class="op">);</span><span class="co">//error</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="fu">method</span><span class="op">(</span>list3<span class="op">);</span><span class="co">//error</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">method</span><span class="op">(</span><span class="bu">ArrayList</span><span class="op">&lt;</span>Ye<span class="op">&gt;</span> list<span class="op">){</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Ye<span class="op">{};</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Fu <span class="kw">extends</span> Ye<span class="op">{};</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Zi <span class="kw">extends</span> Fu<span class="op">{};</span></span></code></pre></div><p>泛型里面是什么，就得传什么</p><h4 id="数据具有继承性">数据具有继承性</h4><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">ArrayList</span><span class="op">;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> GenericsDemo <span class="op">{</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span><span class="op">(</span><span class="bu">String</span><span class="op">[]</span> args<span class="op">)</span> <span class="op">{</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">ArrayList</span><span class="op">&lt;</span>Ye<span class="op">&gt;</span> list1 <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">ArrayList</span><span class="op">&lt;</span>Fu<span class="op">&gt;</span> list2 <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">ArrayList</span><span class="op">&lt;</span>Zi<span class="op">&gt;</span> list3 <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">// method(list1);</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="co">// method(list2);//error</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">// method(list3);//error</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        list1<span class="op">.</span><span class="fu">add</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Ye</span><span class="op">());</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        list1<span class="op">.</span><span class="fu">add</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Fu</span><span class="op">());</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        list1<span class="op">.</span><span class="fu">add</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Zi</span><span class="op">());</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">method</span><span class="op">(</span><span class="bu">ArrayList</span><span class="op">&lt;</span>Ye<span class="op">&gt;</span> list<span class="op">){</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Ye<span class="op">{};</span></span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Fu <span class="kw">extends</span> Ye<span class="op">{};</span></span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Zi <span class="kw">extends</span> Fu<span class="op">{};</span></span></code></pre></div><p>这样是可以的</p><h3 id="泛型方法">泛型方法</h3><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="dt">static</span><span class="op">&lt;</span>E<span class="op">&gt;</span> <span class="dt">void</span> <span class="fu">method</span><span class="op">(</span><span class="bu">ArrayList</span><span class="op">&lt;</span>E<span class="op">&gt;</span> list<span class="op">)</span> <span class="op">{</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><p>在修饰符后面加入泛型，可以生成泛型方法</p><p><strong>弊端</strong>：可以接受任意的数据类型</p><h4 id="通配符限定范围">通配符限定范围</h4><ul><li><code>?</code>：表示不确定的类型，可以放在泛型里面</li></ul><p>例如：</p><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">method</span><span class="op">(</span><span class="bu">ArrayList</span><span class="op">&lt;?&gt;</span> list<span class="op">)</span> <span class="op">{</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">//此时不用在修饰符后面显式标注泛型</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><ul><li><code>? extends E</code>：表示可以传递<code>E</code>或者<code>E</code>所有的子类类型</li><li><code>? super E</code>：表示可以传递<code>E</code>或者<code>E</code>所有的父类类型</li></ul><h3 id="应用场景">应用场景</h3><ul><li>在定义类、方法、接口的时候，如果类型不确定，就可以定义泛型类、泛型方法、泛型接口</li><li>如果类型不确定，但是之后只能传递某个继承体系里面的，可以使用泛型的通配符</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;大部分都和C++中一样，主要注意泛型和多态相关的一部分内容&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="泛型" scheme="https://ethanh3514.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java Collection Lambda表达式遍历</title>
    <link href="https://ethanh3514.github.io/2024/03/11/Java-Collection-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://ethanh3514.github.io/2024/03/11/Java-Collection-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%81%8D%E5%8E%86/</id>
    <published>2024-03-11T14:36:50.000Z</published>
    <updated>2024-03-11T14:44:44.154Z</updated>
    
    <content type="html"><![CDATA[<p>Java的Collection可以通过迭代器、增强for、forEach遍历，而forEach遍历中又可以使用lambda表达式简化代码，现在从源码上分析Lambda表达式遍历的原理。</p><span id="more"></span><h4 id="正常使用foreach遍历示例">正常使用forEach遍历示例</h4><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="bu">Collection</span><span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;</span> col <span class="op">=</span> <span class="kw">new</span> <span class="bu">ArrayList</span><span class="op">&lt;&gt;();</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>col<span class="op">.</span><span class="fu">forEach</span><span class="op">(</span><span class="kw">new</span> Consumer<span class="op">&lt;</span><span class="bu">String</span><span class="op">&gt;(){</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="at">@Override</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//s依次表示集合中每一个元素</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">accept</span><span class="op">(</span><span class="bu">String</span> s<span class="op">)</span> <span class="op">{</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">);</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="op">});</span></span></code></pre></div><h4 id="foreach源码">forEach()源码</h4><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">default</span> <span class="dt">void</span> <span class="fu">forEach</span><span class="op">(</span>Consumer<span class="op">&lt;?</span> <span class="kw">super</span> T<span class="op">&gt;</span> action<span class="op">)</span> <span class="op">{</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>        Objects<span class="op">.</span><span class="fu">requireNonNull</span><span class="op">(</span>action<span class="op">);</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>T t <span class="op">:</span> <span class="kw">this</span><span class="op">)</span> <span class="op">{</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>            action<span class="op">.</span><span class="fu">accept</span><span class="op">(</span>t<span class="op">);</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><p>可以看到是参数是一个<code>Consumer&lt;? super T&gt; action</code>，之后使用增强for遍历了集合内部的元素</p><h4 id="consumer-super-t源码">Consumer&lt;? super T&gt;源码</h4><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="at">@FunctionalInterface</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">interface</span> Consumer<span class="op">&lt;</span>T<span class="op">&gt;</span> <span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">/**</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span> Performs this operation on the given argument<span class="co">.</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span> <span class="co">@</span>param t the input argument</span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>     <span class="co">*/</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> <span class="fu">accept</span><span class="op">(</span>T t<span class="op">);</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">/**</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span> Returns a composed <span class="co">{@</span>code Consumer<span class="co">}</span> that performs<span class="co">,</span> in sequence<span class="co">,</span> this</span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span> operation followed by the <span class="co">{@</span>code after<span class="co">}</span> operation<span class="co">. </span>If performing either</span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span> operation throws an exception<span class="co">,</span> it is relayed to the caller of the</span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span> composed operation<span class="co">.</span>  If performing this operation throws an exception<span class="co">,</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span> the <span class="co">{@</span>code after<span class="co">}</span> operation will not be performed<span class="co">.</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span> <span class="co">@</span>param after the operation to perform after this operation</span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span> <span class="co">@</span>return a composed <span class="co">{@</span>code Consumer<span class="co">}</span> that performs in sequence this</span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span> operation followed by the <span class="co">{@</span>code after<span class="co">}</span> operation</span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>     <span class="co">*</span> <span class="co">@</span>throws NullPointerException if <span class="co">{@</span>code after<span class="co">}</span> is null</span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>     <span class="co">*/</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>    <span class="kw">default</span> Consumer<span class="op">&lt;</span>T<span class="op">&gt;</span> <span class="fu">andThen</span><span class="op">(</span>Consumer<span class="op">&lt;?</span> <span class="kw">super</span> T<span class="op">&gt;</span> after<span class="op">)</span> <span class="op">{</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>        Objects<span class="op">.</span><span class="fu">requireNonNull</span><span class="op">(</span>after<span class="op">);</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="op">(</span>T t<span class="op">)</span> <span class="op">-&gt;</span> <span class="op">{</span> <span class="fu">accept</span><span class="op">(</span>t<span class="op">);</span> after<span class="op">.</span><span class="fu">accept</span><span class="op">(</span>t<span class="op">);</span> <span class="op">};</span></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><p>可以看到是一个接口，并且标注了<code>@FunctionalInterface</code>，可以用lambda表达式来充当这个接口的实现类</p><h4 id="使用lambda后的代码">使用lambda后的代码</h4><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>col<span class="op">.</span><span class="fu">forEach</span><span class="op">(</span>s <span class="op">-&gt;</span> <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>s<span class="op">));</span></span></code></pre></div><p>可以发现大大简化了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java的Collection可以通过迭代器、增强for、forEach遍历，而forEach遍历中又可以使用lambda表达式简化代码，现在从源码上分析Lambda表达式遍历的原理。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Collection" scheme="https://ethanh3514.github.io/tags/Collection/"/>
    
    <category term="Lambda" scheme="https://ethanh3514.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Java Lambda表达式学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/11/Java-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/11/Java-Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-11T06:21:19.000Z</published>
    <updated>2024-03-11T06:29:43.604Z</updated>
    
    <content type="html"><![CDATA[<p>owo</p><span id="more"></span><p>注：Lambda表达式是JDK8之后的语法</p><h4 id="格式">格式</h4><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">(</span>形参<span class="op">)</span> <span class="op">-&gt;</span> <span class="op">{</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    方法体</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h4 id="例">例</h4><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">Arrays</span><span class="op">.</span><span class="fu">sort</span><span class="op">(</span>arr<span class="op">,</span> <span class="op">(</span><span class="bu">Integer</span> o1<span class="op">,</span> <span class="bu">Integer</span> o2<span class="op">)</span> <span class="op">-&gt;</span> <span class="op">{</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> o1 <span class="op">-</span> o2<span class="op">;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="op">});</span></span></code></pre></div><ul><li>Lambda表达式可以用来简化匿名内部类的书写</li><li>只能简化函数式接口的匿名内部类的写法</li><li>有且只有一个抽象方法的接口是函数式接口</li><li>可以在接口上方加<code>@FunctionalInterface</code>注解检查</li></ul><h4 id="函数式接口示例">函数式接口示例</h4><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="at">@FunctionalInterface</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">interface</span> Swim<span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">abstract</span> <span class="dt">void</span> <span class="fu">swimming</span><span class="op">();</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h4 id="lambda的省略规则">Lambda的省略规则</h4><ul><li>参数类型可以省略</li><li>如果只有一个参数，类型和()都可以省略</li><li>如果Lambda表达式的方法体只有一行，大括号，分好，return都可以省略。如果省略，需要同时省略</li></ul><h4 id="例-1">例</h4><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="bu">Arrays</span><span class="op">.</span><span class="fu">sort</span><span class="op">(</span>arr<span class="op">,</span> <span class="op">(</span>o1<span class="op">,</span> o2<span class="op">)</span> <span class="op">-&gt;</span> o1 <span class="op">-</span> o2<span class="op">);</span></span></code></pre></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;owo&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Lambda表达式" scheme="https://ethanh3514.github.io/tags/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>爬虫学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/10/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/10/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-10T14:58:20.000Z</published>
    <updated>2024-03-11T05:38:49.693Z</updated>
    
    <content type="html"><![CDATA[<p>Java爬虫学习笔记</p><span id="more"></span><h3 id="示例代码">示例代码</h3><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">regex</span><span class="op">.</span><span class="im">Matcher</span><span class="op">;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="im">java</span><span class="op">.</span><span class="im">util</span><span class="op">.</span><span class="im">regex</span><span class="op">.</span><span class="im">Pattern</span><span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> str <span class="op">=</span> <span class="st">"待匹配文本"</span><span class="op">;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">//Pattern: 表示正则表达式</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="bu">Pattern</span> p <span class="op">=</span> <span class="bu">Pattern</span><span class="op">.</span><span class="fu">compile</span><span class="op">(</span><span class="st">"正则表达式"</span><span class="op">);</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="co">//Matcher: 文本匹配器，按照正则表达式的规则去读取字符串，从头开始找符合规则的子串</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="bu">Matcher</span> m <span class="op">=</span> p<span class="op">.</span><span class="fu">matcher</span><span class="op">(</span>str<span class="op">);</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="co">//如果没有符合的子串，返回false</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="co">//如果有，返回true。在底层记录子串的起始索引和结束索引+1</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span><span class="op">(</span>m<span class="op">.</span><span class="fu">find</span><span class="op">())</span> <span class="op">{</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="bu">String</span> res <span class="op">=</span> m<span class="op">.</span><span class="fu">group</span><span class="op">();</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="bu">System</span><span class="op">.</span><span class="fu">out</span><span class="op">.</span><span class="fu">println</span><span class="op">(</span>res<span class="op">);</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">//?理解为前面的数据Java</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co">//=表示在Java后面要跟随的数据</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co">//但是在获取的时候，只获取前半部分</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> regex <span class="op">=</span> <span class="st">"Java(?=8|11|17)"</span><span class="op">;</span></span></code></pre></div><h3 id="贪婪捕获和非贪婪捕获">贪婪捕获和非贪婪捕获</h3><ul><li>贪婪捕获：尽可能多地获取（Java中<code>+</code>默认）</li><li>非贪婪捕获：尽可能少地获取</li></ul><h3 id="捕获分组和非捕获分组">捕获分组和非捕获分组</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java爬虫学习笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="爬虫" scheme="https://ethanh3514.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习笔记</title>
    <link href="https://ethanh3514.github.io/2024/03/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://ethanh3514.github.io/2024/03/10/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-10T12:20:40.000Z</published>
    <updated>2024-03-10T14:59:17.638Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式可以很方便地判断字符串格式，应用很广</p><span id="more"></span><h3 id="使用">使用</h3><p><code>字符串.matches("正则表达式")</code></p><p>这里的正则表达式就是一个字符串</p><h2 id="规则">规则</h2><h3 id="字符类">字符类</h3><ul><li><code>[abc]</code> 只能是a,b,c之一</li><li><code>[^abc]</code>除了a,b,c以外的字符</li><li><code>[a-zA-Z]</code>a到z，A到Z，闭区间</li><li><code>[a-d[m-p]]</code> a到d，或m到p</li><li><code>[a-z&amp;&amp;[def]]</code> a-z和def的交集</li><li><code>[a-z&amp;&amp;[^bc]]</code>a-z和非bc的交集。等价于<code>[ad-z]</code></li><li><code>[a-z&amp;&amp;[^m-p]]</code>a-z和除了m-p的交集。等价于<code>[a-lq-z]</code></li></ul><h3 id="预定义字符">预定义字符</h3><ul><li><code>.</code> 任何字符，除回车符号<code>\n</code></li><li><code>\d</code> 一个数字：<code>[0-9]</code></li><li><code>\D</code> 非数字：<code>[^0-9]</code></li><li><code>\s</code> 一个空白字符：<code>[\t\n\x0B\f\r]</code></li><li><code>\S</code> 非空白字符：<code>[^\s]</code></li><li><code>\w</code> 英文、数字、下划线：<code>[a-zA-Z_0-9]</code></li><li><code>\W</code> 一个非单词字符：<code>[^\w]</code></li></ul><p><code>\</code> 需要转义，变成<code>\\</code></p><h3 id="数量词">数量词</h3><ul><li><code>X?</code> ：X，一次或0次</li><li><code>X*</code> ：X，零次或多次</li><li><code>X+</code> ：X，一次或多次</li><li><code>X{n}</code> ：X，正好n次</li><li><code>X{n,}</code> ：X，至少n次</li><li><code>X{n,m}</code> ：X，至少n但不超过m次</li></ul><h3 id="tricks">tricks</h3><ul><li>匹配时忽略abc的大小写</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> regex <span class="op">=</span> <span class="st">"(?i)abc"</span><span class="op">;</span></span></code></pre></div><ul><li>匹配时忽略b的大小写</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> regex <span class="op">=</span> <span class="st">"a((?i)b)c"</span><span class="op">;</span></span></code></pre></div><hr><h2 id="练习">练习</h2><blockquote><p>从左往右依次看</p></blockquote><ol type="1"><li>手机号码</li></ol><div class="sourceCode" id="cb3"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> regex <span class="op">=</span> <span class="st">"1[3-9]</span><span class="sc">\\</span><span class="st">d{9}"</span><span class="op">;</span></span></code></pre></div><ol start="2" type="1"><li>座机号码</li></ol><p>例：020-2324242</p><p>格式：区号（以0开头，有3到4位）+可以有一位分隔符（-）+号码（第一位不能是0，后面任意，总长度5-10位）</p><div class="sourceCode" id="cb4"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> regex <span class="op">=</span> <span class="st">"0</span><span class="sc">\\</span><span class="st">d{2,3}-?[1-9]</span><span class="sc">\\</span><span class="st">d{4-9}"</span><span class="op">;</span></span></code></pre></div><ol start="3" type="1"><li>邮箱号码</li></ol><div class="sourceCode" id="cb5"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> regex <span class="op">=</span> <span class="st">"</span><span class="sc">\\</span><span class="st">w+@[</span><span class="sc">\\</span><span class="st">w&amp;&amp;[^_]]{2,6}(</span><span class="sc">\\</span><span class="st">.[a-zA-Z]{2,3}){1,2}"</span><span class="op">;</span></span></code></pre></div><ol start="4" type="1"><li>身份证严格匹配</li></ol><div class="sourceCode" id="cb6"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="bu">String</span> regex <span class="op">=</span> <span class="st">"[1-9]</span><span class="sc">\\</span><span class="st">d{5}(18|19|20)</span><span class="sc">\\</span><span class="st">d{2}(0</span><span class="sc">\\</span><span class="st">d|1[012])(0[1-9]|[12]</span><span class="sc">\\</span><span class="st">d|3[01])</span><span class="sc">\\</span><span class="st">d{3}[</span><span class="sc">\\</span><span class="st">dXx]"</span></span></code></pre></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;正则表达式可以很方便地判断字符串格式，应用很广&lt;/p&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://ethanh3514.github.io/tags/Java/"/>
    
    <category term="笔记" scheme="https://ethanh3514.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="正则表达式" scheme="https://ethanh3514.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
</feed>
